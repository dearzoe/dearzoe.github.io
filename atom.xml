<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>成长笔记</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://huwenzhe.com/"/>
  <updated>2018-07-06T07:42:07.031Z</updated>
  <id>http://huwenzhe.com/</id>
  
  <author>
    <name>文哲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Symbol</title>
    <link href="http://huwenzhe.com/2018/07/05/es6-Symbol/"/>
    <id>http://huwenzhe.com/2018/07/05/es6-Symbol/</id>
    <published>2018-07-04T16:00:00.000Z</published>
    <updated>2018-07-06T07:42:07.031Z</updated>
    
    <content type="html"><![CDATA[<p>ES6用的并不多，在新的项目中，除了用了一些箭头函数，数组计算方法，块状作用域，其他的用的比较少，这里说一个比较少用的Symbol()方法</p><a id="more"></a><p><code>Symbol</code>这个词很少听过，应该是后台的同学听说的比较多，前端我只在ES6中有接触过。</p><ul><li><code>Symbol</code>的中文意思是符号, 标志, 标记</li><li><code>&lt;symbol&gt;</code>标签在SVG中，用来指代SVG小图标。</li></ul><p>再这里，<code>Symbol</code>又是原生<code>JavaScript</code>的一个数据类型<br><strong>undefined</strong>、<strong>null</strong>、<strong>string</strong>、<strong>boolearn</strong>、<strong>number</strong>、<strong>object</strong>、<strong>symbol</strong></p><p>而<code>Symbol</code>本身又是一个方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>();<span class="comment">//"symbol"</span></span><br></pre></td></tr></table></figure></p><p>但是<code>Symbol</code>并不能像<code>string</code>、<code>boolearn</code>、<code>number</code>、<code>object</code>那样作为构造函数使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="comment">/*Uncaught TypeError: Symbol is not a constructor</span></span><br><span class="line"><span class="comment">    at new Symbol (&lt;anonymous&gt;)</span></span><br><span class="line"><span class="comment">    at &lt;anonymous&gt;:1:1*/</span></span><br></pre></td></tr></table></figure><h3 id="重点：Symbol的作用"><a href="#重点：Symbol的作用" class="headerlink" title="重点：Symbol的作用"></a>重点：Symbol的作用</h3><h5 id="Symbol的作用非常的专一，换句话说其设计出来就只有一个目的——作为对象属性的唯一标识符，防止对象属性冲突发生。"><a href="#Symbol的作用非常的专一，换句话说其设计出来就只有一个目的——作为对象属性的唯一标识符，防止对象属性冲突发生。" class="headerlink" title="Symbol的作用非常的专一，换句话说其设计出来就只有一个目的——作为对象属性的唯一标识符，防止对象属性冲突发生。"></a>Symbol的作用非常的专一，换句话说其设计出来就只有一个目的——作为对象属性的唯一标识符，防止对象属性冲突发生。</h5><p>举个例子，公司新来一个同事，想了解关于她的更多信息，于是就询问Hr同事，扫地阿姨，于是得到类似这样信息：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> info1 = &#123;</span><br><span class="line">    name: <span class="string">'张小小'</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    job: <span class="string">'PHP工程师'</span>,</span><br><span class="line">    description: <span class="string">'平时喜欢做做瑜伽，人家有男朋友，你别指望了（HR描述）'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> info2 = &#123;</span><br><span class="line">    description: <span class="string">'这小姑娘挺好的，挺热情的，嘿嘿嘿……（阿姨描述）'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后汇集信息的时候:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, info1, info2);</span><br><span class="line">target = &#123;</span><br><span class="line">    age:<span class="number">24</span>,</span><br><span class="line">    job:<span class="string">"PHP工程师"</span>,</span><br><span class="line">    name:<span class="string">"张小小"</span>,</span><br><span class="line">    description:<span class="string">"这小姑娘挺好的，挺热情的，嘿嘿嘿……（阿姨描述）"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，你需要对这两个数据进行汇总，结果，就会发现，描述都用了同一个对象属性<code>description</code>，于是整合的时候，就容器冲突，覆盖，导致“人家有男朋友”这么重要的信息都没注意到。</p><p>但是，如果要是Symbol，则完全就不要担心这个问题了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> info1 = &#123;</span><br><span class="line">    name: <span class="string">'张小小'</span>,</span><br><span class="line">    age: <span class="number">24</span>,</span><br><span class="line">    job: <span class="string">'PHP工程师'</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">'description'</span>)]: <span class="string">'平时喜欢做做瑜伽，人家有男朋友，你别指望了（HR描述）'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> info2 = &#123;</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">'description'</span>)]: <span class="string">'这小姑娘挺好的，挺热情的，嘿嘿嘿……（阿姨描述）'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，我们对info1, info2对象进行复制，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> target = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(target, info1, info2);</span><br><span class="line">target = &#123;</span><br><span class="line">    age:<span class="number">24</span>,</span><br><span class="line">    job:<span class="string">"PHP工程师"</span>,</span><br><span class="line">    name:<span class="string">"张小小"</span>,</span><br><span class="line">    <span class="built_in">Symbol</span>(description):<span class="string">"平时喜欢做做瑜伽，人家有男朋友，你别指望了（HR描述）"</span>,</span><br><span class="line">    <span class="built_in">Symbol</span>(description):<span class="string">"这小姑娘挺好的，挺热情的，嘿嘿嘿……（阿姨描述）"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有的描述信息都被完完整整地保留了下来了。</p><p>因为Symbol()返回值是唯一的，也就是：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>(<span class="string">'description'</span>) === <span class="built_in">Symbol</span>(<span class="string">'description'</span>);    <span class="comment">// 返回值是false</span></span><br></pre></td></tr></table></figure><h3 id="再重点：Symbol的语法（光知道作用不行啊）"><a href="#再重点：Symbol的语法（光知道作用不行啊）" class="headerlink" title="再重点：Symbol的语法（光知道作用不行啊）"></a>再重点：Symbol的语法（光知道作用不行啊）</h3><h5 id="语法如下："><a href="#语法如下：" class="headerlink" title="语法如下："></a>语法如下：</h5><p><code>Symbol</code>函数可以接受一个字符串作为参数，表示对 <code>Symbol</code> 实例的描述，主要是为了在控制台显示，或者转为字符串时，比较容易区分。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 = <span class="built_in">Symbol</span>(<span class="string">'foo'</span>);</span><br><span class="line"><span class="keyword">let</span> s2 = <span class="built_in">Symbol</span>(<span class="string">'bar'</span>);</span><br><span class="line"></span><br><span class="line">s1 <span class="comment">// Symbol(foo)</span></span><br><span class="line">s2 <span class="comment">// Symbol(bar)</span></span><br><span class="line"></span><br><span class="line">s1.toString() <span class="comment">// "Symbol(foo)"</span></span><br><span class="line">s2.toString() <span class="comment">// "Symbol(bar)"</span></span><br></pre></td></tr></table></figure><p>上面代码中，<strong>s1</strong>和<strong>s2</strong>是两个 <code>Symbol</code> 值。如果不加参数，它们在控制台的输出都是<code>Symbol()</code>，不利于区分。有了参数以后，就等于为它们加上了描述，输出的时候就能够分清，到底是哪一个值。</p><p>如果 <code>Symbol</code> 的参数是一个对象，就会调用该对象的<code>toString</code>方法，将其转为字符串，然后才生成一个 <code>Symbol</code> 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  toString() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'abc'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> sym = <span class="built_in">Symbol</span>(obj);</span><br><span class="line">sym <span class="comment">// Symbol(abc)</span></span><br></pre></td></tr></table></figure><p>如果对象没有<code>toString</code>方法…<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Symbol</span>([object <span class="built_in">Object</span>])</span><br></pre></td></tr></table></figure></p><p><code>Symbol</code> 值不能与其他类型的值进行运算，会报错。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>(<span class="string">'My symbol'</span>);</span><br><span class="line"></span><br><span class="line"><span class="string">"your symbol is "</span> + sym</span><br><span class="line"><span class="comment">// TypeError: can't convert symbol to string</span></span><br><span class="line"><span class="string">`your symbol is <span class="subst">$&#123;sym&#125;</span>`</span></span><br><span class="line"><span class="comment">// TypeError: can't convert symbol to string</span></span><br></pre></td></tr></table></figure></p><p>另外，<code>Symbol</code> 值也可以转为布尔值，但是不能转为数值。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="built_in">Boolean</span>(sym) <span class="comment">// true</span></span><br><span class="line">!sym  <span class="comment">// false</span></span><br><span class="line"><span class="keyword">if</span> (sym) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Number</span>(sym) <span class="comment">// TypeError</span></span><br><span class="line">sym + <span class="number">2</span> <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure></p><h6 id="作为属性名的-Symbol"><a href="#作为属性名的-Symbol" class="headerlink" title="作为属性名的 Symbol"></a>作为属性名的 Symbol</h6><p>由于每一个 <code>Symbol</code> 值都是不相等的，这意味着 <code>Symbol</code> 值可以作为标识符，用于对象的属性名，就能保证不会出现同名的属性。这对于一个对象由多个模块构成的情况非常有用，能防止某一个键被不小心改写或覆盖。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line">a[mySymbol] = <span class="string">'Hello!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  [mySymbol]: <span class="string">'Hello!'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第三种写法</span></span><br><span class="line"><span class="keyword">let</span> a = &#123;&#125;;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(a, mySymbol, &#123; <span class="attr">value</span>: <span class="string">'Hello!'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上写法都得到同样结果</span></span><br><span class="line">a[mySymbol] <span class="comment">// "Hello!"</span></span><br></pre></td></tr></table></figure><p>在对象的内部，使用 <code>Symbol</code> 值定义属性时，<code>Symbol</code> 值必须放在方括号之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [s]: <span class="function"><span class="keyword">function</span> (<span class="params">arg</span>) </span>&#123; ... &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">obj[s](<span class="number">123</span>);</span><br></pre></td></tr></table></figure><p><strong>同理</strong> <code>Symbol</code> 值作为对象属性名时，不能用点运算符。 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mySymbol = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> a = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">a.mySymbol = <span class="string">'Hello!'</span>;</span><br><span class="line">a[mySymbol] <span class="comment">// undefined</span></span><br><span class="line">a[<span class="string">'mySymbol'</span>] <span class="comment">// "Hello!"</span></span><br></pre></td></tr></table></figure><p><code>Symbol</code> 类型还可以用于定义一组常量，保证这组常量的值都是不相等的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> log = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">log.levels = &#123;</span><br><span class="line">  DEBUG: <span class="built_in">Symbol</span>(<span class="string">'debug'</span>),</span><br><span class="line">  INFO: <span class="built_in">Symbol</span>(<span class="string">'info'</span>),</span><br><span class="line">  WARN: <span class="built_in">Symbol</span>(<span class="string">'warn'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(log.levels.DEBUG, <span class="string">'debug message'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(log.levels.INFO, <span class="string">'info message'</span>);</span><br></pre></td></tr></table></figure><p>下面是另外一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> COLOR_RED    = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> COLOR_GREEN  = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getComplement</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">switch</span> (color) &#123;</span><br><span class="line">    <span class="keyword">case</span> COLOR_RED:</span><br><span class="line">      <span class="keyword">return</span> COLOR_GREEN;</span><br><span class="line">    <span class="keyword">case</span> COLOR_GREEN:</span><br><span class="line">      <span class="keyword">return</span> COLOR_RED;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Undefined color'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常量使用 Symbol 值最大的好处，就是其他任何值都不可能有相同的值了，因此可以保证上面的switch语句会按设计的方式工作。</p><h6 id="实例：消除魔术字符串"><a href="#实例：消除魔术字符串" class="headerlink" title="实例：消除魔术字符串"></a>实例：消除魔术字符串</h6><p>魔术字符串指的是，在代码之中多次出现、与代码形成强耦合的某一个具体的字符串或者数值。风格良好的代码，应该尽量消除魔术字符串，改由含义清晰的变量代替。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">'Triangle'</span>: <span class="comment">// 魔术字符串</span></span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">/* ... more code ... */</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(<span class="string">'Triangle'</span>, &#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span> &#125;); <span class="comment">// 魔术字符串</span></span><br></pre></td></tr></table></figure><p>上面代码中，字符串<code>Triangle</code>就是一个魔术字符串。它多次出现，与代码形成“强耦合”，不利于将来的修改和维护。</p><p>常用的消除魔术字符串的方法，就是把它写成一个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="string">'Triangle'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getArea</span>(<span class="params">shape, options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> area = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">switch</span> (shape) &#123;</span><br><span class="line">    <span class="keyword">case</span> shapeType.triangle:</span><br><span class="line">      area = <span class="number">.5</span> * options.width * options.height;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getArea(shapeType.triangle, &#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">height</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure><p>上面代码中，我们把<code>Triangle</code>写成<code>shapeType</code>对象的<code>triangle</code>属性，这样就消除了强耦合。</p><p>如果仔细分析，可以发现<code>shapeType.triangle</code>等于哪个值并不重要，只要确保不会跟其他<code>shapeType</code>属性的值冲突即可。因此，这里就很适合改用 <code>Symbol</code> 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> shapeType = &#123;</span><br><span class="line">  triangle: <span class="built_in">Symbol</span>()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>上面代码中，除了将<code>shapeType.triangle</code>的值设为一个 <code>Symbol</code>，其他地方都不用修改。</p><h6 id="属性名的遍历"><a href="#属性名的遍历" class="headerlink" title="属性名的遍历"></a>属性名的遍历</h6><p><code>Symbol</code> 作为属性名，该属性不会出现在<code>for...in</code>、<code>for...of</code>循环中，也不会被<code>Object.keys()</code>、<code>Object.getOwnPropertyNames()</code>、<code>JSON.stringify()</code>返回。但是，它也不是私有属性，有一个<code>Object.getOwnPropertySymbols</code>方法，可以获取指定对象的所有 <code>Symbol</code> 属性名。</p><p><code>Object.getOwnPropertySymbols</code>方法返回一个数组，成员是当前对象的所有用作属性名的 Symbol 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</span><br><span class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">obj[a] = <span class="string">'Hello'</span>;</span><br><span class="line">obj[b] = <span class="string">'World'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objectSymbols = <span class="built_in">Object</span>.getOwnPropertySymbols(obj);</span><br><span class="line"></span><br><span class="line">objectSymbols</span><br><span class="line"><span class="comment">// [Symbol(a), Symbol(b)]</span></span><br></pre></td></tr></table></figure><p>另一个新的 <strong>API</strong>，<strong>Reflect.ownKeys</strong>方法可以返回所有类型的键名，包括常规键名和 <code>Symbol</code> 键名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="string">'my_key'</span>)]: <span class="number">1</span>,</span><br><span class="line">  enum: <span class="number">2</span>,</span><br><span class="line">  nonEnum: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Reflect</span>.ownKeys(obj)</span><br><span class="line"><span class="comment">//  ["enum", "nonEnum", Symbol(my_key)]</span></span><br></pre></td></tr></table></figure><blockquote><p>未完待续</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES6用的并不多，在新的项目中，除了用了一些箭头函数，数组计算方法，块状作用域，其他的用的比较少，这里说一个比较少用的Symbol()方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://huwenzhe.com/tags/js/"/>
    
      <category term="数据类型" scheme="http://huwenzhe.com/tags/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>H5视频音频弹窗</title>
    <link href="http://huwenzhe.com/2018/05/04/H5%E8%A7%86%E9%A2%91%E9%9F%B3%E9%A2%91%E5%BC%B9%E7%AA%97/"/>
    <id>http://huwenzhe.com/2018/05/04/H5视频音频弹窗/</id>
    <published>2018-05-03T16:00:00.000Z</published>
    <updated>2018-05-04T06:21:18.608Z</updated>
    
    <content type="html"><![CDATA[<div style="text-align: center;"><br><img src="http://dearzoe.coding.me/blogImg/images/54.jpg" alt="54青年节" align="center"><br>配图与标题无关，谁让今天是五四呢？任性一把？嗯…任性一把！<br></div><a id="more"></a><div style="text-align: center;"><br></div><h2 id="DEMO"><a href="#DEMO" class="headerlink" title="DEMO"></a><a href="http://huwenzhe.com/dialog-video-audio/">DEMO</a></h2><h2 id="github地址"><a href="#github地址" class="headerlink" title="github地址"></a><a href="https://github.com/dearzoe/dialog-video-audio" target="_blank" rel="noopener">github地址</a></h2><div style="text-align: center;"><br><img src="http://dearzoe.coding.me/blogImg/images/xiaoguo.jpg" alt="效果图" align="center"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;text-align: center;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://dearzoe.coding.me/blogImg/images/54.jpg&quot; alt=&quot;54青年节&quot; align=&quot;center&quot;&gt;&lt;br&gt;配图与标题无关，谁让今天是五四呢？任性一把？嗯…任性一把！&lt;br&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://huwenzhe.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>vue对数组变化不刷新问题</title>
    <link href="http://huwenzhe.com/2018/04/24/vue%E5%AF%B9%E6%95%B0%E7%BB%84%E5%8F%98%E5%8C%96%E4%B8%8D%E5%88%B7%E6%96%B0%E9%97%AE%E9%A2%98/"/>
    <id>http://huwenzhe.com/2018/04/24/vue对数组变化不刷新问题/</id>
    <published>2018-04-23T16:00:00.000Z</published>
    <updated>2018-04-24T04:43:54.532Z</updated>
    
    <content type="html"><![CDATA[<p><div style="text-align: center;"><img src="https://cn.vuejs.org/images/logo.png" style="width:215px" alt="vue"></div></p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>在一个选项卡中，修改数据之后，用的是vue本身的方法去把处理完的数据放到已处理中（存在问题，切换选项卡变空白），<br><a id="more"></a></p><p><div><img src="http://dearzoe.coding.me/blogImg/images/vue2.jpg" style="width:594px" alt="vue"></div><br>如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var item = this.deepCopySingle(unprocessed[index]);//deepCopySingle为深拷贝</span><br><span class="line">unprocessed.splice(index, 1);</span><br><span class="line">processed.unshift(data);</span><br></pre></td></tr></table></figure></p><p>数据结构是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/*数据列表*/</span><br><span class="line">data: &#123;</span><br><span class="line">processed: [],//处理</span><br><span class="line">unprocessed: []//未处理</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/*深拷贝*/</span><br><span class="line">deepCopy(arr) &#123;</span><br><span class="line">    return arr.map((e) =&gt; &#123;</span><br><span class="line">      if (typeof e === &apos;object&apos;) &#123;</span><br><span class="line">        return Object.assign(&#123;&#125;, e)</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return e</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line">/*处理选项切换*/</span><br><span class="line">handleTabClick(tab) &#123;</span><br><span class="line">    //创建临时数据结构</span><br><span class="line">    let objData = &#123;</span><br><span class="line">      processed: [],</span><br><span class="line">      unprocessed: []</span><br><span class="line">    &#125;</span><br><span class="line">    //深拷贝（这里本可以用对象遍历的方式，不过因为自己组件中常用数组，所以就没有去单写）</span><br><span class="line">    objData.processed = this.deepCopy(this.remind.data.processed)</span><br><span class="line">    objData.unprocessed = this.deepCopy(this.remind.data.unprocessed)</span><br><span class="line">    //重新赋值触发刷新</span><br><span class="line">    this.remind.data = objData</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;https://cn.vuejs.org/images/logo.png&quot; style=&quot;width:215px&quot; alt=&quot;vue&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h2 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h2&gt;&lt;p&gt;在一个选项卡中，修改数据之后，用的是vue本身的方法去把处理完的数据放到已处理中（存在问题，切换选项卡变空白），&lt;br&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://huwenzhe.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 神经网络库</title>
    <link href="http://huwenzhe.com/2018/04/02/JavaScript%20%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%BA%93/"/>
    <id>http://huwenzhe.com/2018/04/02/JavaScript 神经网络库/</id>
    <published>2018-04-01T16:00:00.000Z</published>
    <updated>2018-04-13T07:13:11.183Z</updated>
    
    <content type="html"><![CDATA[<div style="text-align: center;"><img src="http://dearzoe.coding.me/blogImg/images/shenjing.jpg" width="600" height="320" alt="神经网络" align="center"></div><a id="more"></a><h2 id="训练神经网络识别颜色对比度"><a href="#训练神经网络识别颜色对比度" class="headerlink" title="训练神经网络识别颜色对比度"></a><a href="https://brain.js.org/" target="_blank" rel="noopener">训练神经网络识别颜色对比度</a></h2><div style="text-align: center;"><img src="http://dearzoe.coding.me/blogImg/images/shenjingdemo1.jpg" width="596" height="320" alt="神经网络" align="center"></div><h2 id="训练神经网络识别颜色对比度-1"><a href="#训练神经网络识别颜色对比度-1" class="headerlink" title="训练神经网络识别颜色对比度"></a><a href="https://brain.js.org/" target="_blank" rel="noopener">训练神经网络识别颜色对比度</a></h2><div style="text-align: center;"><img src="http://dearzoe.coding.me/blogImg/images/shenjingdemo2.jpg" width="596" height="320" alt="神经网络" align="center"></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://dearzoe.coding.me/blogImg/images/shenjing.jpg&quot; width=&quot;600&quot; height=&quot;320&quot; alt=&quot;神经网络&quot; align=&quot;center&quot;&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://huwenzhe.com/tags/js/"/>
    
      <category term="机器学习" scheme="http://huwenzhe.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue中的 Object.defineProperty</title>
    <link href="http://huwenzhe.com/2018/03/30/Vue%E4%B8%AD%E7%9A%84Object.defineProperty/"/>
    <id>http://huwenzhe.com/2018/03/30/Vue中的Object.defineProperty/</id>
    <published>2018-03-29T16:00:00.000Z</published>
    <updated>2018-04-13T07:13:11.099Z</updated>
    
    <content type="html"><![CDATA[<div style="text-align: center;"><img src="http://dearzoe.coding.me/blogImg/images/object.jpg" width="496" height="199" alt="object" align="center"></div><a id="more"></a><h2 id="Vue中的-Object-defineProperty"><a href="#Vue中的-Object-defineProperty" class="headerlink" title="Vue中的 Object.defineProperty"></a>Vue中的 Object.defineProperty</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class="line">  value:&apos;blog&apos;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(obj.name);//blog</span><br></pre></td></tr></table></figure><ul><li>第一个参数：目标对象</li><li>第二个参数：需要定义的属性或方法的名字。</li><li>第三个参数：目标属性所拥有的特性。（descriptor）</li></ul><p>前两个参数不多说了，一看代码就懂，主要看第三个参数descriptor，看看有哪些取值</p><h2 id="描述符-descriptor"><a href="#描述符-descriptor" class="headerlink" title="描述符 descriptor"></a>描述符 descriptor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class="line">  value:&apos;blog&apos;,</span><br><span class="line">  writable:false,</span><br><span class="line">  enumerable:false,</span><br><span class="line">  configurable:false</span><br><span class="line">&#125;)</span><br><span class="line">console.log(obj.name);//blog</span><br></pre></td></tr></table></figure><ul><li>value：属性的值</li><li>writable：如果为false，属性的值就不能被重写,只能为只读了</li><li>configurable：总开关，一旦为false，就不能再设置他的（value，writable，configurable）</li><li>enumerable：是否能在for…in循环中遍历出来或在Object.keys中列举出来。</li><li>get：读取值时触发（不能和value和writable同时用）</li><li>set：设置值时触发（不能和value和writable同时用）</li></ul><h2 id="是否可编写-writable"><a href="#是否可编写-writable" class="headerlink" title="是否可编写 writable"></a>是否可编写 writable</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class="line">  value:&apos;blog&apos;,</span><br><span class="line">  writable:false,//※</span><br><span class="line">  enumerable:false,</span><br><span class="line">  configurable:false</span><br><span class="line">&#125;)</span><br><span class="line">console.log(obj.name);//blog</span><br><span class="line">obj.name = &apos;guangzhou&apos;</span><br><span class="line">console.log(obj.name);//blog</span><br></pre></td></tr></table></figure><p>另一个例子 （※：是指变化的变量）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;;</span><br><span class="line">Object.defineProperty(obj,&quot;name1&quot;,&#123;</span><br><span class="line">  value:&apos;blog1&apos;,</span><br><span class="line">  writable:true,//※</span><br><span class="line">  enumerable:false,</span><br><span class="line">  configurable:false</span><br><span class="line">&#125;)</span><br><span class="line">Object.defineProperty(obj,&quot;name2&quot;,&#123;</span><br><span class="line">  value:&apos;blog2&apos;,</span><br><span class="line">  writable:false,//※</span><br><span class="line">  enumerable:false,</span><br><span class="line">  configurable:false</span><br><span class="line">&#125;)</span><br><span class="line">console.log(obj);//&#123;name1: &quot;blog1&quot;, name2: &quot;blog2&quot;&#125;</span><br><span class="line">obj.name1 = &apos;guangzhou1&apos;;</span><br><span class="line">obj.name2 = &apos;guangzhou2&apos;;</span><br><span class="line">console.log(obj);//&#123;name1: &quot;guangzhou1&quot;, name2: &quot;blog2&quot;&#125;</span><br></pre></td></tr></table></figure></p><p>这里的name1和name2是进行单独设置的，并没有对整个对象产生影响</p><h2 id="是否可枚举-enumerable"><a href="#是否可枚举-enumerable" class="headerlink" title="是否可枚举 enumerable"></a>是否可枚举 enumerable</h2><p>例子（※：是指变化的变量）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj,&quot;name1&quot;,&#123;</span><br><span class="line">  value:&apos;blog1&apos;,</span><br><span class="line">  enumerable:true//※</span><br><span class="line">&#125;)</span><br><span class="line">Object.defineProperty(obj,&quot;name2&quot;,&#123;</span><br><span class="line">  value:&apos;blog2&apos;,</span><br><span class="line">  enumerable:true//※</span><br><span class="line">&#125;)</span><br><span class="line">Object.defineProperty(obj,&quot;name3&quot;,&#123;</span><br><span class="line">  value:&apos;blog3&apos;,</span><br><span class="line">  enumerable:false//※</span><br><span class="line">&#125;)</span><br><span class="line">Object.keys(obj)//[&quot;name1&quot;, &quot;name2&quot;]</span><br></pre></td></tr></table></figure></p><h2 id="全局开关"><a href="#全局开关" class="headerlink" title="全局开关"></a>全局开关</h2><p>同一属性方法名：（报错）（※：是指变化的变量）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class="line">  value:&apos;blog&apos;,</span><br><span class="line">  configurable:false//※</span><br><span class="line">&#125;)</span><br><span class="line">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class="line">  value:&apos;blog&apos;,</span><br><span class="line">  configurable:true//※</span><br><span class="line">&#125;)</span><br><span class="line">//Uncaught TypeError: Cannot redefine property: name</span><br><span class="line">//    at Function.defineProperty (&lt;anonymous&gt;)</span><br><span class="line">//    at &lt;anonymous&gt;:6:8</span><br></pre></td></tr></table></figure></p><p>不同属性方法名：（OK）（※：是指变化的变量）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj,&quot;name1&quot;,&#123;//※</span><br><span class="line">  value:&apos;blog&apos;,</span><br><span class="line">  configurable:false//※</span><br><span class="line">&#125;)</span><br><span class="line">Object.defineProperty(obj,&quot;name2&quot;,&#123;//※</span><br><span class="line">  value:&apos;blog&apos;,</span><br><span class="line">  configurable:true//※</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>开关先后顺序：（OK）（※：是指变化的变量）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class="line">  value:&apos;blog&apos;,</span><br><span class="line">  configurable:true//※</span><br><span class="line">&#125;)</span><br><span class="line">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class="line">  value:&apos;blog&apos;,</span><br><span class="line">  configurable:false//※</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h2 id="set-get"><a href="#set-get" class="headerlink" title="set , get"></a>set , get</h2><p>直接看代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var obj = &#123;&#125;</span><br><span class="line">Object.defineProperty(obj,&quot;name&quot;,&#123;</span><br><span class="line">  set:function(newValue)&#123;</span><br><span class="line">    console.log(&quot;你要赋值给我,我的新值是&quot;+newValue)</span><br><span class="line">    &#125;,</span><br><span class="line">  get:function()&#123;</span><br><span class="line">    console.log(&quot;你取我的值&quot;)</span><br><span class="line">    return &apos;已修改&apos; //默认返回字符串</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)</span><br><span class="line">console.log(obj.name)</span><br><span class="line">//你取我的值</span><br><span class="line">obj.name=&apos;guangzhou&apos;</span><br><span class="line">//已修改</span><br><span class="line">//你要赋值给我,我的新值是guangzhou</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;text-align: center;&quot;&gt;&lt;img src=&quot;http://dearzoe.coding.me/blogImg/images/object.jpg&quot; width=&quot;496&quot; height=&quot;199&quot; alt=&quot;object&quot; align=&quot;center&quot;&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="vue" scheme="http://huwenzhe.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>判断浏览器是否缩放</title>
    <link href="http://huwenzhe.com/2018/01/10/%E5%88%A4%E6%96%AD%E6%B5%8F%E8%A7%88%E5%99%A8%E6%98%AF%E5%90%A6%E7%BC%A9%E6%94%BE/"/>
    <id>http://huwenzhe.com/2018/01/10/判断浏览器是否缩放/</id>
    <published>2018-01-09T16:00:00.000Z</published>
    <updated>2018-05-04T03:44:37.080Z</updated>
    
    <content type="html"><![CDATA[<p><div style="text-align: center;"><br><img src="http://dearzoe.coding.me/blogImg/images/liulan.jpg" alt="浏览器" align="center"><br></div><br>Hello，新年好啊，新年第一篇，并没有写最近学习的python，那个过几天整理一些出来，今天分享的一个小demo</p><a id="more"></a><p><div style="text-align: center;"><br><img src="http://dearzoe.coding.me/blogImg/images/suofang.png" alt="缩放" align="center"><br></div><br>就是如何判断浏览器是否是缩放模式并且兼容IE</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$.extend(&#123;</span><br><span class="line">     winZoom:function()&#123;</span><br><span class="line">        var ratio = 0,</span><br><span class="line">            screen = window.screen,//有关用户屏幕的信息</span><br><span class="line">            ua = navigator.userAgent.toLowerCase();//声明了浏览器用于 HTTP 请求的用户代理头的值</span><br><span class="line">        if( ~ua.indexOf(&apos;firefox&apos;) )&#123;//火狐浏览器</span><br><span class="line">            if( window.devicePixelRatio !== undefined )&#123;</span><br><span class="line">                ratio = window.devicePixelRatio;//获取设备像素比</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else if( ~ua.indexOf(&apos;msie&apos;) )&#123;//IE浏览器</span><br><span class="line">            if( screen.deviceXDPI &amp;&amp; screen.logicalXDPI )&#123;</span><br><span class="line">                ratio = screen.deviceXDPI / screen.logicalXDPI;//获取设备像素点比</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else if( window.outerWidth !== undefined &amp;&amp; window.innerWidth !== undefined )&#123;</span><br><span class="line">            ratio = window.outerWidth / window.innerWidth;//屏幕宽度显示宽度比</span><br><span class="line">        &#125;</span><br><span class="line">        if( ratio )&#123;</span><br><span class="line">            ratio = Math.round( ratio * 100 );</span><br><span class="line">        &#125;</span><br><span class="line">        // 360安全浏览器下的innerWidth包含了侧边栏的宽度</span><br><span class="line">        if( ratio !== 100 )&#123;</span><br><span class="line">            if( ratio &gt;= 95 &amp;&amp; ratio &lt;= 105 )&#123;</span><br><span class="line">                ratio = 100;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return ratio;</span><br><span class="line">    &#125;&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>~</strong> :if语句中的~号取反的意思，这个比较少用<br> <strong>screen.deviceXDPI</strong> :属性返回显示屏幕的每英寸水平点数。(可理解为innerWidth)<br> <strong>screen.logicalXDPI</strong> :属性返回显示屏幕每英寸的水平方向的常规点数。(可理解为outerWidth)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//执行就不多说了</span><br><span class="line">var zoomFn = function()&#123;</span><br><span class="line">    var ratio = $.winZoom();</span><br><span class="line">    if( ratio &lt; 100 || ratio &gt; 100)&#123;</span><br><span class="line">        $(&quot;.tips-wrapper&quot;).html(&apos;&lt;p class=&quot;alert alert-warning&quot;&gt;浏览器处于缩放模式,为了你更好的浏览体验，请使用ctrl+0进行重置.&lt;/p&gt;&apos;).show();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        $(&quot;.tips-wrapper&quot;).html(&quot;&quot;).hide();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">$(window).resize(function()&#123;</span><br><span class="line">    zoomFn();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">zoomFn();</span><br></pre></td></tr></table></figure><p>祝福大家在新的一年里快速成长，早日步入BAT(ˉ▽￣～)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;div style=&quot;text-align: center;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://dearzoe.coding.me/blogImg/images/liulan.jpg&quot; alt=&quot;浏览器&quot; align=&quot;center&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;Hello，新年好啊，新年第一篇，并没有写最近学习的python，那个过几天整理一些出来，今天分享的一个小demo&lt;/p&gt;
    
    </summary>
    
    
      <category term="浏览器兼容" scheme="http://huwenzhe.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9/"/>
    
  </entry>
  
  <entry>
    <title>王者荣耀空白名破解</title>
    <link href="http://huwenzhe.com/2017/12/27/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E7%A9%BA%E7%99%BD%E5%90%8D%E7%A0%B4%E8%A7%A3/"/>
    <id>http://huwenzhe.com/2017/12/27/王者荣耀空白名破解/</id>
    <published>2017-12-26T16:00:00.000Z</published>
    <updated>2018-05-04T03:44:37.036Z</updated>
    
    <content type="html"><![CDATA[<div style="text-align: center;"><br><img src="http://tb1.bdstatic.com/tb/cms/ngmis/file_1514298392346.png" alt="王者荣耀" align="center"><br></div><br>一切的缘由都来自某次匹配遇到一个空白名的人，我就在想还能有这种bug？于是就开始各种搜索空白名的做法，度娘问遍了方法试遍了也没有在ios微信区试用的，于是出于好奇的我上了某宝买了一个想一探究竟<br><br><a id="more"></a><br><br>## 字符串里的东西<br><br>‘⁢ ⁠⁡⁢⁣’这个引号中的就是我在某宝上买来的所谓的代码<br><br>###### 查看长度<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;.length //结果是这样的-&gt; 6</span><br></pre></td></tr></table></figure><br><br>###### 但是怎么看里面的内容呢？通过转成16进制的Unicode<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 转为unicode 编码</span><br><span class="line">function encodeUnicode(str) &#123;</span><br><span class="line">    var res = [];</span><br><span class="line">    for ( var i=0; i&lt;str.length; i++ ) &#123;</span><br><span class="line">    res[i] = ( &quot;00&quot; + str.charCodeAt(i).toString(16) ).slice(-4);</span><br><span class="line">    &#125;</span><br><span class="line">    return &quot;\\u&quot; + res.join(&quot;\\u&quot;);</span><br><span class="line">&#125;</span><br><span class="line">encodeUnicode(&apos; &apos;)</span><br><span class="line">//结果是这样的-&gt; &quot;\u2062\u200a\u2060\u2061\u2062\u2063&quot;</span><br></pre></td></tr></table></figure><br><br>&gt; \u2062 这种东西又是什么呢？<br>我们可以登录<a href="https://unicode-table.com/cn/" target="_blank" rel="noopener">unicode</a>查看搜索;<br>其实每一个都是一个特殊字符<br><br>比如：<br><img src="http://dearzoe.coding.me/blogImg/images/4.png" width="600" height="160" alt="Singaat" align="center"><br>- 2062   对应的就是   撒玛利亚文字母 Singaat<br><img src="http://dearzoe.coding.me/blogImg/images/1.png" width="600" height="160" alt="微间隔" align="center"><br>- 200a   对应的就是   微间隔<br><img src="http://dearzoe.coding.me/blogImg/images/2.png" width="600" height="160" alt="Mim" align="center"><br>- 2060   对应的就是   撒玛利亚文字母 Mim<br><img src="http://dearzoe.coding.me/blogImg/images/3.png" width="600" height="160" alt="Nun" align="center"><br>- 2061   对应的就是   撒玛利亚文字母 Nun<br><img src="http://dearzoe.coding.me/blogImg/images/4.png" width="600" height="160" alt="Singaat" align="center"><br>- 2062   对应的就是   撒玛利亚文字母 Singaat<br><img src="http://dearzoe.coding.me/blogImg/images/5.png" width="600" height="160" alt="In" align="center"><br>- 2063   对应的就是   撒玛利亚文字母 In<br><br>对于复杂字符为什么不显示的问题可以参考<a href="http://litten.me/2017/11/13/strange-characters1/" target="_blank" rel="noopener">人人都是艺术家！谈谈那些奇怪的字符（上）</a><br>好了，那我们是不是可以随便组合然后转换回去呢？<br><br>当然了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 解码</span><br><span class="line">function decodeUnicode(str) &#123;</span><br><span class="line">    str = str.replace(/\\/g, &quot;%&quot;);</span><br><span class="line">    return unescape(str);</span><br><span class="line">&#125;</span><br><span class="line">decodeUnicode(&apos;\u2062\u200a\u2060\u2061\u2062\u2063&apos;)//解码这里我们可以自由更换unicode码 - 比如你试试\u2067 (ˉ▽￣～)</span><br><span class="line">//结果是这样的-&gt; &apos; &apos;</span><br></pre></td></tr></table></figure><br><br>然后我们复制引号中的字符，就可以给我们的王者荣耀改空白名字啦~<br>也许不知道怎么运行代码的小伙伴也别着急，只要你们有浏览器就可以，打开浏览器（我以谷歌浏览器为例），在浏览器页面按<strong>F12</strong>,然后会打开<strong>控制台</strong>页面，然后我们找到下面图片中的<strong>console</strong>,也就是我们的控制台，然后按照图片上面的步骤把我上面代码块上的方法粘贴过去（<span style="color:#ed363d;">红色是方法，</span><span style="color:#22b14c;">绿色是使用方法，</span><span style="color:#00a2e8;">蓝色箭头指的是结果</span>）<br><div style="text-align: center;"><br><img src="http://dearzoe.coding.me/blogImg/images/console.png" width="1256" height="870" alt="console" align="center"><br></div><h6 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h6><div style="text-align: center;"><br><img src="http://dearzoe.coding.me/blogImg/images/wzry2.jpg" width="1070" height="802" alt="weixin" align="center"><br></div><br><div style="text-align: center;"><br><img src="http://dearzoe.coding.me/blogImg/images/wzry1.jpg" width="1070" height="802" alt="weixin" align="center"><br></div>]]></content>
    
    <summary type="html">
    
      &lt;div style=&quot;text-align: center;&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://tb1.bdstatic.com/tb/cms/ngmis/file_1514298392346.png&quot; alt=&quot;王者荣耀&quot; align=&quot;center&quot;&gt;&lt;br&gt;&lt;/div&gt;&lt;br&gt;一切的缘由都来自某次匹配遇到一个空白名的人，我就在想还能有这种bug？于是就开始各种搜索空白名的做法，度娘问遍了方法试遍了也没有在ios微信区试用的，于是出于好奇的我上了某宝买了一个想一探究竟&lt;br&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="王者荣耀" scheme="http://huwenzhe.com/tags/%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80/"/>
    
  </entry>
  
  <entry>
    <title>分时与节流</title>
    <link href="http://huwenzhe.com/2017/11/29/%E8%8A%82%E6%B5%81%E4%B8%8E%E5%88%86%E6%97%B6/"/>
    <id>http://huwenzhe.com/2017/11/29/节流与分时/</id>
    <published>2017-11-28T16:00:00.000Z</published>
    <updated>2018-04-13T07:13:10.975Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dearzoe.coding.me/blogImg/images/timg.jpg" style="width:650px"></p><h2 id="分时与节流"><a href="#分时与节流" class="headerlink" title="分时与节流"></a>分时与节流</h2><p>其实是两种场景下的JS性能优化的方案。你尽可以想象成倚天剑和屠龙刀，都是非常锋利好用的东东，起码切个大白菜胡萝卜啥的是肯定没问题的~~</p><a id="more"></a><h2 id="1-节流函数"><a href="#1-节流函数" class="headerlink" title="1. 节流函数"></a>1. 节流函数</h2><p>js中的<strong>函数</strong>，大多情况都是由用户<strong>主观</strong>上触发的。<br>比如点击某个按钮触发某函数啊，文本框内容改变时触发某函数啊等等，这种情况一般是不需要考虑性能问题的。<br>但是有些情况下，函数的触发并不受用户的直接控制。在这些场景下，函数就会被过度频繁的调用造成性能下降的问题了，比如以下情况：</p><h3 id="window-onresize事件。"><a href="#window-onresize事件。" class="headerlink" title="window.onresize事件。"></a>window.onresize事件。</h3><p>我们给window对象绑定了resize事件，当浏览器大小改变时，这个事件的触发频率特别高。</p><h3 id="mousemove事件。"><a href="#mousemove事件。" class="headerlink" title="mousemove事件。"></a>mousemove事件。</h3><p>如果我们给一个div节点绑定了拖拽事件，那么div节点被拖动时，也会频繁的触发该拖拽事件的函数。</p><p><img data-type="gif" src="http://dearzoe.coding.me/blogImg/images/0.gif"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;head lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;不节流&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">//不节流</span><br><span class="line">window.onresize = function()&#123;</span><br><span class="line">console.log(&apos;hello&apos;);</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p><img data-type="gif" src="http://dearzoe.coding.me/blogImg/images/1.gif"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">//************节流函数**********************</span><br><span class="line">var throttle = function(fn,interval)&#123;</span><br><span class="line">var _self = fn;//保存需要被延时执行的函数引用</span><br><span class="line">var timer;//定时器</span><br><span class="line">var firstTime = true;//是否是第一次调用</span><br><span class="line">return function()&#123;</span><br><span class="line">//将参数列表和this都先保存下来，以备延时函数调用</span><br><span class="line">var args = arguments;</span><br><span class="line">var _me = this;</span><br><span class="line">console.log(_me);//追踪this的指向</span><br><span class="line">if(firstTime)&#123;//如果是第一次调用，不需要延迟执行</span><br><span class="line">_self.apply(_me,args);//调用函数</span><br><span class="line">firstTime = false;//将标志位置为假</span><br><span class="line">return;//执行完函数后返回，下面的代码无需执行</span><br><span class="line">&#125;</span><br><span class="line">if(timer)&#123;//如果定时器还在，说明前一次延迟执行还没完成，直接返回，下面的代码无需执行</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">timer = setTimeout(function()&#123;</span><br><span class="line">clearTimeout(timer);//清空timer</span><br><span class="line">timer = null;</span><br><span class="line">_self.apply(_me,args);//调用函数</span><br><span class="line">&#125;,interval || 500);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//测试一下节流吧~~</span><br><span class="line">window.onresize = throttle(function()&#123;</span><br><span class="line">console.log(&apos;hello&apos;);//这里要注意this作用域问题，这里是指向外面的window</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="2-分时函数"><a href="#2-分时函数" class="headerlink" title="2. 分时函数"></a>2. 分时函数</h2><p>有时，某些函数确实是用户主动调用的，但因为一些客观的原因，这些函数严重的影响了页面性能。<br>比如<strong>数据量庞大的列表</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">var arr = [];//900个好友的数据</span><br><span class="line">for(var i=0;i&lt;900;i++)&#123;</span><br><span class="line">arr.push(&#123;name:i&#125;);</span><br><span class="line">&#125;</span><br><span class="line">//渲染好友列表</span><br><span class="line">var renderFriendList = function(data)&#123;</span><br><span class="line">for(var i=0;i&lt;data.length;i++)&#123;</span><br><span class="line">var div = document.createElement(&apos;div&apos;);</span><br><span class="line">div.innerHTML = &quot;朋友&quot;+data[i][&apos;name&apos;];</span><br><span class="line">document.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderFriendList(arr);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><h2 id="那么这种情况下，我们就可以利用setInterval函数来分时创建了。"><a href="#那么这种情况下，我们就可以利用setInterval函数来分时创建了。" class="headerlink" title="那么这种情况下，我们就可以利用setInterval函数来分时创建了。"></a>那么这种情况下，我们就可以利用setInterval函数来分时创建了。</h2><p>   比如有900条数据，我可以一次只创建10个dom节点，分90次创建完。这样做因为有时间段间隔开了，内存和cpu就有了腾挪余地，不至于出现卡顿或死翘翘了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">var arr = [];//900个好友的数据</span><br><span class="line">for(var i=0;i&lt;900;i++)&#123;</span><br><span class="line">arr.push(&#123;name:i&#125;);</span><br><span class="line">&#125;</span><br><span class="line">//创建一个好友节点</span><br><span class="line">var createOneFriend = function(data)&#123;</span><br><span class="line">var div = document.createElement(&apos;div&apos;);</span><br><span class="line">div.innerHTML = &quot;朋友&quot;+data[&apos;name&apos;];</span><br><span class="line">document.body.appendChild(div);</span><br><span class="line">&#125;;</span><br><span class="line">//***************分时函数**********************</span><br><span class="line">//arr是数据，fn是回调函数，count是每次创建的节点数</span><br><span class="line">var timechunk = function(arr,fn,count)&#123;</span><br><span class="line">var timer;</span><br><span class="line">//创建dom节点函数</span><br><span class="line">var start = function()&#123;</span><br><span class="line">for(var i=0;i&lt;Math.min(count,arr.length);i++)&#123;//最后一批数据，可能arr.length小于count</span><br><span class="line">var obj = arr.shift();//数组出列1个数据，长度减1</span><br><span class="line">fn(obj);//调用</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">return function()&#123;</span><br><span class="line">timer = setInterval(function()&#123;</span><br><span class="line">if(arr.length ===0)&#123;//数组容器为空，说明都创建完毕了</span><br><span class="line">clearInterval(timer);//清除定时器</span><br><span class="line">return;//返回</span><br><span class="line">&#125;</span><br><span class="line">start();//开始创建节点</span><br><span class="line">&#125;,500);//时间间隔为500毫秒</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line">//分批渲染，每次创建10个节点</span><br><span class="line">var renderList = timechunk(arr,createOneFriend,10);</span><br><span class="line">//测试一下吧~~</span><br><span class="line">renderList();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dearzoe.coding.me/blogImg/images/timg.jpg&quot; style=&quot;width:650px&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;分时与节流&quot;&gt;&lt;a href=&quot;#分时与节流&quot; class=&quot;headerlink&quot; title=&quot;分时与节流&quot;&gt;&lt;/a&gt;分时与节流&lt;/h2&gt;&lt;p&gt;其实是两种场景下的JS性能优化的方案。你尽可以想象成倚天剑和屠龙刀，都是非常锋利好用的东东，起码切个大白菜胡萝卜啥的是肯定没问题的~~&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://huwenzhe.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>干货[书、视频]</title>
    <link href="http://huwenzhe.com/2017/11/16/%E5%B9%B2%E8%B4%A7/"/>
    <id>http://huwenzhe.com/2017/11/16/干货/</id>
    <published>2017-11-16T02:44:53.451Z</published>
    <updated>2017-11-29T12:57:19.276Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://www.ruanyifeng.com/images_pub/pub_222.jpg" style="width:650px"></p><h2 id="分享干货（每周更新）"><a href="#分享干货（每周更新）" class="headerlink" title="分享干货（每周更新）"></a>分享干货（每周更新）</h2><a id="more"></a><h4 id="前端收集图谱"><a href="#前端收集图谱" class="headerlink" title="前端收集图谱"></a><a href="http://get-set.cn/front-end-collect/" target="_blank" rel="noopener">前端收集图谱</a></h4><p>此部分为<a href="https://github.com/jikeytang" target="_blank" rel="noopener">@jikeytang </a>贡献</p><ul><li>clone <a href="https://github.com/hjzheng/front-end-collect" target="_blank" rel="noopener">https://github.com/hjzheng/front-end-collect</a></li><li>cd front-end-collect</li><li>bower install</li><li>放入你喜欢的web容器,访问index.html即可</li><li>你也直接可以访问: <a href="http://get-set.cn/front-end-collect/" target="_blank" rel="noopener">http://get-set.cn/front-end-collect/</a></li><li>支持Chrome, Firefox and IE10&amp;11以上浏览器</li></ul><p><img src="https://raw.githubusercontent.com/hjzheng/front-end-collect/master/img/front-end-chart.png" alt="image"></p><h4 id="聚合-amp-amp-周报订阅"><a href="#聚合-amp-amp-周报订阅" class="headerlink" title="聚合&amp;&amp;周报订阅"></a>聚合&amp;&amp;周报订阅</h4><table><thead><tr><th>名称</th><th>订阅地址</th><th>介绍</th></tr></thead><tbody><tr><td><strong>英文推送</strong></td><td></td><td></td></tr><tr><td>Html5 Weekly</td><td><a href="http://html5weekly.com/" target="_blank" rel="noopener">http://html5weekly.com/</a></td><td>Html 技术类</td></tr><tr><td>CSS Weekly</td><td><a href="http://css-weekly.com/" target="_blank" rel="noopener">http://css-weekly.com/</a></td><td></td></tr><tr><td>Javascript Weekly</td><td><a href="http://javascriptweekly.com/" target="_blank" rel="noopener">http://javascriptweekly.com/</a></td><td>JS相关，同样有 html,css 和工具相关</td></tr><tr><td>Web Design Weekly</td><td><a href="http://web-design-weekly.com/" target="_blank" rel="noopener">http://web-design-weekly.com/</a></td><td>设计、技术、技巧、工具聚合</td></tr><tr><td>UX Weekly</td><td><a href="http://uxwkly.com/" target="_blank" rel="noopener">http://uxwkly.com/</a></td><td>用户体验、网页设计推送</td></tr><tr><td>Web Tools Weekly</td><td><a href="http://webtoolsweekly.com/" target="_blank" rel="noopener">http://webtoolsweekly.com/</a></td><td>Js，工具推送</td></tr><tr><td>RESPONSIVE DESIGN NEWSLETTER</td><td><a href="http://responsivedesignweekly.com/" target="_blank" rel="noopener">http://responsivedesignweekly.com/</a></td><td>每周推送一次响应式设计相关</td></tr><tr><td>Tutorialzine</td><td><a href="http://tutorialzine.com/" target="_blank" rel="noopener">http://tutorialzine.com/</a></td><td>精品教程和资源推送</td></tr><tr><td>Sidebar</td><td><a href="http://sidebar.io/" target="_blank" rel="noopener">http://sidebar.io/</a></td><td>每天、每半周、每周推送5条设计相关</td></tr><tr><td>The Hacker News Newsletter</td><td><a href="http://www.hackernewsletter.com/" target="_blank" rel="noopener">http://www.hackernewsletter.com/</a></td><td>HN 每周精选</td></tr><tr><td>Design News</td><td><a href="https://news.layervault.com/" target="_blank" rel="noopener">https://news.layervault.com/</a></td><td>F2类资讯聚合</td></tr><tr><td>Css Animations</td><td><a href="http://cssanimation.rocks/" target="_blank" rel="noopener">http://cssanimation.rocks/</a></td><td>关于CSS动画的订阅</td></tr><tr><td>HACKDESIGN</td><td><a href="http://hackdesign.org/" target="_blank" rel="noopener">http://hackdesign.org/</a></td><td>每周发布一个设计类课程</td></tr><tr><td><strong>中文推送</strong></td><td></td><td></td></tr><tr><td>稀土:掘金</td><td><a href="http://gold.xitu.io/" target="_blank" rel="noopener">http://gold.xitu.io/</a></td><td>国内十分用心的开发者技术分享、交流平台</td></tr><tr><td>SegmentFault精选</td><td><a href="http://segmentfault.com/" target="_blank" rel="noopener">http://segmentfault.com/</a></td><td>国内开发者技术问答社区每周精选问答</td></tr><tr><td>FE Weekly</td><td><a href="http://www.feweekly.com/" target="_blank" rel="noopener">http://www.feweekly.com/</a></td><td>每周一次，内容主要是英文的，不过有中文导读</td></tr><tr><td>EchoJs_News</td><td><a href="http://www.echojs.com/" target="_blank" rel="noopener">http://www.echojs.com/</a></td><td>每天推送若干好文，都是英文的，JS技术类</td></tr><tr><td>碼天狗週刊</td><td><a href="http://weekly.codetengu.com/" target="_blank" rel="noopener">http://weekly.codetengu.com/</a></td><td>台湾的，一份開發者導向的IT 技術週刊，適合所有患有資訊焦慮症、氣血循環不順以及性受挫的軟體工程師們。</td></tr><tr><td>前端资源分享 半月刊</td><td><a href="http://www.hacke2.cn/monthly/" target="_blank" rel="noopener">http://www.hacke2.cn/monthly/</a></td><td>每半月发布最新高质量的前端资源</td></tr></tbody></table><h2 id="专业博客"><a href="#专业博客" class="headerlink" title="专业博客"></a>专业博客</h2><p>注:此处<code>活跃度</code>为博客更新频率，<code>原创度</code>指的是作者原创或者翻译的文章所占博文比例。请尊重原创，大量转载其他网站资讯的网站和聚合类网站不做推荐。</p><h4 id="中文博客"><a href="#中文博客" class="headerlink" title="中文博客"></a>中文博客</h4><table><thead><tr><th>名称</th><th>活跃度</th><th>原创度</th><th>维护者</th><th>其他</th></tr></thead><tbody><tr><td><a href="http://www.w3cplus.com/" target="_blank" rel="noopener">W3Cplus</a></td><td>★★★★★</td><td>★★★★★</td><td>携程 @大漠</td><td>国内最优秀的前端博客，原创居多</td></tr><tr><td><a href="http://www.w3cfuns.com/" target="_blank" rel="noopener">W3Cfuns</a></td><td>★★★★★</td><td>★★★★☆</td><td><a href="http://www.w3cfuns.com/misc.php?mod=faq&amp;action=faq&amp;id=1" target="_blank" rel="noopener">#</a></td><td>专注于web前端开发行业的综合性门户网站</td></tr><tr><td><a href="http://www.qianduan.net/" target="_blank" rel="noopener">前端观察</a></td><td>★★★★☆</td><td>★★★★☆</td><td>腾讯 ISUX @神飞</td><td>曾经最优秀，最近更新不频繁了</td></tr><tr><td><a href="http://www.alloyteam.com/" target="_blank" rel="noopener">腾讯web前端 AlloyTeam 团队</a></td><td>★★★★</td><td>★★★★</td><td><a href="http://t.qq.com/AlloyTeam" target="_blank" rel="noopener">@腾讯AlloyTeam</a></td><td>来自于腾讯SNG(社交网络事业群)</td></tr><tr><td><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="noopener">张鑫旭-鑫空间-鑫生活</a></td><td>★★★★☆</td><td>★★★★★</td><td>张鑫旭</td><td>重构很厉害，不少经典文章经验</td></tr><tr><td><a href="http://www.36ria.com/" target="_blank" rel="noopener">ria之家</a></td><td>★★★★☆</td><td>★★★★☆</td><td>淘宝 @明河</td><td>#</td></tr><tr><td><a href="http://www.daqianduan.com/" target="_blank" rel="noopener">大前端</a></td><td>★★★★☆</td><td>★★★★☆</td><td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="noopener">#</a></td><td>#</td></tr><tr><td><a href="http://www.cssforest.org/blog/" target="_blank" rel="noopener">CSS森林</a></td><td>★★★★☆</td><td>★★★★☆</td><td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="noopener">关于</a></td><td>#</td></tr><tr><td><a href="http://www.shejidaren.com/" target="_blank" rel="noopener">设计达人</a></td><td>★★★★☆</td><td>★★★☆☆</td><td><a href="http://www.cssforest.org/blog/index.php?s=about" target="_blank" rel="noopener">#</a></td><td>更新较频繁，但转载也较多</td></tr><tr><td><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰博客</a></td><td>★★★★☆</td><td>★★★☆☆</td><td><a href="http://www.ruanyifeng.com/about.html" target="_blank" rel="noopener">#</a></td><td>牛人一个</td></tr><tr><td><a href="http://beforweb.com/" target="_blank" rel="noopener">Be For Web - 为网而生 - 原创译文博客</a></td><td>★★★★☆</td><td>★★★★☆</td><td><a href="http://weibo.com/c7210" target="_blank" rel="noopener">@C7210</a></td><td>关注移动应用及互联网产品、用户体验设计、前端开发</td></tr></tbody></table><h4 id="国外博客"><a href="#国外博客" class="headerlink" title="国外博客"></a>国外博客</h4><table><thead><tr><th>名称</th><th>活跃度</th><th>原创度</th><th>维护者</th><th>其他</th></tr></thead><tbody><tr><td><a href="http://www.smashingmagazine.com/" target="_blank" rel="noopener">Smashing Magazine</a></td><td>★★★★★</td><td>★★★★★</td><td>#</td><td>业界权威，web 设计很赞</td></tr><tr><td><a href="http://hub.tutsplus.com/" target="_blank" rel="noopener">Tuts</a></td><td>★★★★★</td><td>★★★★★</td><td>-</td><td>国外知名开发者网站</td></tr><tr><td><a href="http://www.developerdrive.com/" target="_blank" rel="noopener">DeveloperDrive</a></td><td>★★★★★</td><td>★★★★★</td><td>-</td><td>优质前端技术信息</td></tr><tr><td><a href="http://css-tricks.com/" target="_blank" rel="noopener">CSS-TRICKS</a></td><td>★★★★★</td><td>★★★★★</td><td>Chris Coyier</td><td>左边这位是大神</td></tr><tr><td><a href="http://webdesignerwall.com/" target="_blank" rel="noopener">Web Designer Wall</a></td><td>★★★★★</td><td>★★★★★</td><td>Nick La.</td><td>优质 Html5,CSS3等教程</td></tr><tr><td><a href="http://tutorialzine.com/" target="_blank" rel="noopener">Tutorialzine</a></td><td>★★★★★</td><td>★★★★★</td><td>#</td><td>大量 web 教程和资源</td></tr><tr><td><a href="http://inspectelement.com/" target="_blank" rel="noopener">Inspect Element</a></td><td>★★★★★</td><td>★★★★★</td><td>#</td><td>CSS,wordpress 相关教程挺多</td></tr><tr><td><a href="http://tympanus.net/codrops/" target="_blank" rel="noopener">Codrops</a></td><td>★★★★★</td><td>★★★★★</td><td>#</td><td>设计、交互、CSS</td></tr><tr><td><a href="http://www.onerutter.com/" target="_blank" rel="noopener">Jake Rutter</a></td><td>★★★★★</td><td>★★★★★</td><td>Jake Rutter</td><td>Jquery 作者，不解释了</td></tr><tr><td><a href="http://www.paulirish.com/" target="_blank" rel="noopener">Paul Irish</a></td><td>★★★★★</td><td>★★★★★</td><td>Paul Irish</td><td>大神,Google Chrome团队,Yeoman</td></tr><tr><td><a href="http://krasimirtsonev.com/blog" target="_blank" rel="noopener">Krasimir Tsonev</a></td><td>★★★★★</td><td>★★★★★</td><td>Krasimir Tsonev</td><td>html5,ccs3,javascript</td></tr><tr><td><a href="http://www.nczonline.net/" target="_blank" rel="noopener">NCZOnline</a></td><td>★★★★★</td><td>★★★★★</td><td>Nicholas C. Zakas</td><td>html5,ccs3,javascript</td></tr><tr><td><a href="http://www.html5rocks.com/en/" target="_blank" rel="noopener">HTML5 Rocks</a></td><td>★★★★★</td><td>★★★★★</td><td>#</td><td>html5权威网站</td></tr><tr><td><a href="http://alistapart.com/" target="_blank" rel="noopener">A List Apart</a></td><td>★★★★★</td><td>★★★★★</td><td>#</td><td>可以改变世界的文章</td></tr><tr><td><a href="http://hakim.se/" target="_blank" rel="noopener">hakim</a></td><td>★★★★★</td><td>★★★★★</td><td>HAKIM EL HATTAB</td><td>ccs3,javascript</td></tr><tr><td><a href="http://dailyjs.com/" target="_blank" rel="noopener">DailyJS</a></td><td>★★★★★</td><td>★★★★★</td><td>#</td><td>javascript</td></tr></tbody></table><h4 id="活跃微博"><a href="#活跃微博" class="headerlink" title="活跃微博"></a>活跃微博</h4><table><thead><tr><th>ID</th><th>公司</th><th>简介</th></tr></thead><tbody><tr><td><a href="http://weibo.com/xitucircle" target="_blank" rel="noopener">@稀土圈</a></td><td>#</td><td>强烈推荐，分享一些技术文章和Github项目</td></tr><tr><td><a href="http://weibo.com/w3cchina" target="_blank" rel="noopener">@w3c中国</a></td><td>#</td><td>万维网联盟中国办事处官方微博</td></tr><tr><td><a href="http://weibo.com/javascriptdev" target="_blank" rel="noopener">@TheFrontEnd</a></td><td>#</td><td>JavaScript技术资讯、新闻、教程、深度文章。</td></tr><tr><td><a href="http://weibo.com/fekb" target="_blank" rel="noopener">@前端快爆</a></td><td>阿里巴巴</td><td>有HTML5、CSS3、JS</td></tr><tr><td><a href="http://e.weibo.com/html5cn" target="_blank" rel="noopener">@HTML5中国</a></td><td>#</td><td>中国www.html5cn.org官方微博</td></tr></tbody></table><h4 id="开发者博客"><a href="#开发者博客" class="headerlink" title="开发者博客"></a>开发者博客</h4><p>微博微信流行后，明显感觉到写博客的人还是越来越少了，下面推荐的这些开发者属于在网上比较活跃的，或者博客积累了大量优质资源的。</p><h5 id="国内开发者"><a href="#国内开发者" class="headerlink" title="国内开发者"></a>国内开发者</h5><p>国内开发者一块欢迎大家 <code>Fork</code>提交推荐，最好能推荐一些在前端界较活跃的的开发者。</p><table><thead><tr><th>ID</th><th>博客</th><th>微博</th><th>Github</th><th>Twitter</th><th>公司</th><th>关键字</th></tr></thead><tbody><tr><td>小胡子哥</td><td><a href="http://www.barretlee.com/" target="_blank" rel="noopener">barretlee</a></td><td><a href="http://weibo.com/173248656" target="_blank" rel="noopener">@Barret李靖</a></td><td><a href="https://github.com/barretlee" target="_blank" rel="noopener">@barretlee</a></td><td>#</td><td>#</td><td>阿里巴巴</td></tr><tr><td>小鱼</td><td><a href="http://sofish.de/" target="_blank" rel="noopener">sofish</a></td><td><a href="http://weibo.com/sofish" target="_blank" rel="noopener">@sofish</a></td><td>#</td><td>#</td><td>#</td><td>饿了么前端</td></tr><tr><td>屈光宇</td><td><a href="https://imququ.com/" target="_blank" rel="noopener">Jerry Qu的小站</a></td><td><a href="http://weibo.com/jerryqu" target="_blank" rel="noopener">屈光宇</a></td><td>#</td><td>#</td><td>#</td><td>奇虎360前端,HTTP,Node。js</td></tr><tr><td>郭宇</td><td><a href="http://blog.guoyu.me/" target="_blank" rel="noopener">Einmal ist keinmal</a></td><td><a href="http://weibo.com/137601206" target="_blank" rel="noopener">@郭宇</a></td><td><a href="https://github.com/guo-yu" target="_blank" rel="noopener">@guo-yu</a></td><td><a href="https://twitter.com/turingou" target="_blank" rel="noopener">@turingou</a></td><td>今日头条</td><td>Node.js</td></tr><tr><td>hzlzh</td><td><a href="https://zlz.im" target="_blank" rel="noopener">自力博客</a></td><td><a href="http://weibo.com/hzlzh" target="_blank" rel="noopener">@hzlzh</a></td><td><a href="http://github.com/hzlzh" target="_blank" rel="noopener">@hzlzh</a></td><td><a href="http://twitter.com/hzlzh" target="_blank" rel="noopener">@hzlzh</a></td><td>腾讯</td><td>前端开发</td></tr><tr><td>TQ</td><td><a href="http://targetkiller.net/" target="_blank" rel="noopener">http://targetkiller.net/</a></td><td><a href="http://weibo.com/targetkiller" target="_blank" rel="noopener">@Piser-TQ</a></td><td><a href="https://twitter.com/tqtan/" target="_blank" rel="noopener">@tqtan</a></td><td><a href="https://github.com/targetkiller" target="_blank" rel="noopener">@targetkiller</a></td><td>腾讯 微信</td><td>前端</td></tr><tr><td>张鑫旭</td><td><a href="http://www.zhangxinxu.com/wordpress/" target="_blank" rel="noopener">张鑫旭博客</a></td><td><a href="http://weibo.com/zhangxinxu" target="_blank" rel="noopener">@张鑫旭</a></td><td><a href="https://github.com/zhangxinxu" target="_blank" rel="noopener">@zhangxinxu</a></td><td><a href="https://twitter.com/zhangxinxu" target="_blank" rel="noopener">@zhangxinxu</a></td><td>阅文(腾讯文学) YUED</td><td>前端开发</td></tr><tr><td>foru17</td><td><a href="http://luolei.org" target="_blank" rel="noopener">罗磊的独立博客</a></td><td><a href="http://weibo.com/foru17" target="_blank" rel="noopener">@罗罗磊磊</a></td><td><a href="https://github.com/foru17" target="_blank" rel="noopener">@foru17</a></td><td><a href="https://twitter.com/foru17" target="_blank" rel="noopener">@foru17</a></td><td>阅文(腾讯文学) YUED</td></tr><tr><td>LOO2K</td><td><a href="http://loo2k.com/blog/" target="_blank" rel="noopener">LOO2K</a></td><td><a href="http://weibo.com/loo2k" target="_blank" rel="noopener">@LOO2K</a></td><td><a href="https://github.com/loo2k" target="_blank" rel="noopener">LOO2K</a></td><td><a href="https://twitter.com/loo2k/" target="_blank" rel="noopener">LOO2K</a></td><td>腾讯 CDC</td><td>前端</td></tr><tr><td>阮一峰</td><td><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰博客</a></td><td><a href="http://weibo.com/ruanyf" target="_blank" rel="noopener">@ruanyf</a></td><td>#</td><td><a href="https://twitter.com/ruanyf" target="_blank" rel="noopener">@ruanyf</a></td><td>上海金融学院国际金融学院</td><td>教师，博客写作人，翻译人，《黑客与画家》的译者</td></tr><tr><td>老赵</td><td><a href="http://blog.zhaojie.me/" target="_blank" rel="noopener">http://blog.zhaojie.me/</a></td><td><a href="http://weibo.com/jeffz" target="_blank" rel="noopener">@老赵</a></td><td>#</td><td><a href="">#</a></td><td>摩根大通（香港）</td><td>资深码农</td></tr><tr><td>玉伯</td><td><a href="http://lifesinger.wordpress.com/" target="_blank" rel="noopener">岁月如歌</a></td><td><a href="http://weibo.com/lifesinger" target="_blank" rel="noopener">@玉伯也叫射雕</a></td><td><a href="https://github.com/lifesinger" target="_blank" rel="noopener">@lifesinger</a></td><td><a href="https://twitter.com/lifesinger" target="_blank" rel="noopener">@lifesinger</a></td><td>支付宝</td><td>大牛</td></tr><tr><td>kejun</td><td><a href="http://hikejun.com/" target="_blank" rel="noopener">http://hikejun.com/</a></td><td><a href="http://weibo.com/kejunz" target="_blank" rel="noopener">@kejunz</a></td><td><a href="https://github.com/kejun" target="_blank" rel="noopener">@kejunz</a></td><td>#</td><td>豆瓣</td><td>前端大神</td></tr><tr><td>寒冬winter</td><td><a href="http://winter-cn.cnblogs.com/" target="_blank" rel="noopener">winter-cn</a></td><td><a href="http://weibo.com/wintercn" target="_blank" rel="noopener">@寒冬winter</a></td><td>#</td><td>#</td><td>#</td><td>#</td></tr><tr><td>左耳朵耗子</td><td><a href="http://coolshell.cn/" target="_blank" rel="noopener">酷壳</a></td><td><a href="http://weibo.com/haoel" target="_blank" rel="noopener">@左耳朵耗子</a></td><td>#</td><td><a href="https://twitter.com/haoel" target="_blank" rel="noopener">@haoel</a></td><td>淘宝</td><td>#</td></tr><tr><td>fool2fish</td><td>#</td><td><a href="http://weibo.com/fool2fish" target="_blank" rel="noopener">@fool2fish</a></td><td>#</td><td>#</td><td>支付宝</td><td>#</td></tr><tr><td>朴灵</td><td><a href="http://html5ify.com/" target="_blank" rel="noopener">Html5fiy</a></td><td><a href="http://weibo.com/shyvo" target="_blank" rel="noopener">@朴灵</a></td><td><a href="https://github.com/JacksonTian" target="_blank" rel="noopener">JacksonTian</a></td><td>#</td><td>阿里巴巴</td><td>《深入浅出Node.js》作者,大牛</td></tr><tr><td>Cat Chen</td><td><a href="http://catchen.biz/home.zh-CN.html" target="_blank" rel="noopener">陈广琛</a></td><td><a href="http://weibo.com/u/1640352230" target="_blank" rel="noopener">@CatChen</a></td><td><a href="https://github.com/CatChen" target="_blank" rel="noopener">@CatChen</a></td><td><a href="https://twitter.com/CatChen" target="_blank" rel="noopener">@CatChen</a></td><td>Facebook</td><td>大牛</td></tr><tr><td>BYVod</td><td><a href="https://www.byvoid.com/" target="_blank" rel="noopener">Beyond the Void</a></td><td><a href="http://weibo.com/byvoid" target="_blank" rel="noopener">@BYVoid</a></td><td><a href="https://github.com/BYVoid" target="_blank" rel="noopener">@byvoid</a></td><td><a href="https://twitter.com/byvoid" target="_blank" rel="noopener">@BYVoid</a></td><td>Facebook 英国</td><td>《Node.js 开发指南》作者,大牛</td></tr><tr><td>勾三股四</td><td>#</td><td><a href="http://weibo.com/mx006" target="_blank" rel="noopener">@勾三股四</a></td><td>#</td><td>#</td><td>淘宝</td><td>#</td></tr><tr><td>cnberg</td><td><a href="http://cnberg.com" target="_blank" rel="noopener">冰山一角</a></td><td><a href="http://weibo.com/berg" target="_blank" rel="noopener">@berg</a></td><td>@cnberg</td><td><a href="">@cnberg</a></td><td>百度</td><td>骑行</td></tr><tr><td>大猫</td><td><a href="http://bigc.at" target="_blank" rel="noopener">意淫笔记</a></td><td><a href="http://weibo.com/daemao" target="_blank" rel="noopener">@daemao</a></td><td><a href="https://github.com/Damao" target="_blank" rel="noopener">@Damao</a></td><td><a href="https://twitter.com/13igcat" target="_blank" rel="noopener">@13igcat</a></td><td>腾讯</td><td><a href="http://www.zhihu.com/people/13igcat" target="_blank" rel="noopener">知乎</a></td></tr><tr><td>C7210</td><td>beforweb.com/</td><td><a href="http://weibo.com/c7210" target="_blank" rel="noopener">@C7210</a></td><td><a href="http://twittercom/hzlzh" target="_blank" rel="noopener">@C7210</a></td><td><a href="http://github.com/hzlzh" target="_blank" rel="noopener">@C7210</a></td><td>#</td><td>UX、交互设计师、视觉与前端</td></tr><tr><td>kejun</td><td><a href="http://hikejun.com/" target="_blank" rel="noopener">http://hikejun.com/</a></td><td><a href="http://weibo.com/kejun" target="_blank" rel="noopener">#</a></td><td><a href="http://twittercom/kejun" target="_blank" rel="noopener">#</a></td><td><a href="http://github.com/hzlzh" target="_blank" rel="noopener">#</a></td><td>腾讯</td><td>前端开发</td></tr><tr><td>lucifr</td><td><a href="http://lucifr.com/" target="_blank" rel="noopener">http://lucifr.com/</a></td><td><a href="http://weibo.com/lucifr" target="_blank" rel="noopener">@lucifr</a></td><td><a href="http://twittercom/lucifr" target="_blank" rel="noopener">@lucifr</a></td><td><a href="http://github.com/lucifr" target="_blank" rel="noopener">@lucifr</a></td><td>#</td><td>Mac,ios</td></tr><tr><td>smallni</td><td><a href="http://www.smallni.com/" target="_blank" rel="noopener">http://www.smallni.com/</a></td><td><a href="http://weibo.com/hzlzh" target="_blank" rel="noopener">#</a></td><td><a href="https://twitter.com/smallniding/" target="_blank" rel="noopener">@Smallni</a></td><td><a href="http://github.com/hzlzh" target="_blank" rel="noopener">#</a></td><td>腾讯</td><td>前端开发</td></tr><tr><td>qiqiboy</td><td><a href="http://www.qiqiboy.com/" target="_blank" rel="noopener">qiqiboy</a></td><td><a href="http://weibo.com/qiqiboy" target="_blank" rel="noopener">@qiqiboy</a></td><td>#</td><td>#</td><td>老虎证券</td><td>吐槽清理大师开发者</td></tr><tr><td>周爱民</td><td><a href="http://blog.csdn.net/aimingoo/" target="_blank" rel="noopener">aimingoo专栏</a></td><td>#</td><td>#</td><td>#</td><td>支付宝</td><td>JavaScript语言精髓与编程实践作者</td></tr><tr><td>李松峰</td><td><a href="http://www.cn-cuckoo.com" target="_blank" rel="noopener">为之漫笔</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>高程2等书的译者</td></tr><tr><td>99css</td><td><a href="http://www.99css.com/" target="_blank" rel="noopener">99css</a></td><td><a href="http://weibo.com/ytzong" target="_blank" rel="noopener">@ytzong</a></td><td>#</td><td>#</td><td>#</td><td>腾讯一牛</td></tr><tr><td>秦歌</td><td><a href="http://dancewithnet.com/" target="_blank" rel="noopener">Kaven</a></td><td>#</td><td><a href="http://twitter.com/kavenyan" target="_blank" rel="noopener">@kavenyan</a></td><td>#</td><td>#</td><td>js语言精粹译者</td></tr><tr><td>linxz</td><td><a href="http://www.linxz.de/" target="_blank" rel="noopener">linxz</a></td><td>#</td><td>#</td><td>#</td><td>#</td><td>css那些事儿的作者</td></tr><tr><td>Along</td><td><a href="http://jinlong.github.io/" target="_blank" rel="noopener">Along’s Blog</a></td><td><a href="http://weibo.com/newwave" target="_blank" rel="noopener">@newwave</a></td><td>#</td><td>#</td><td>#</td><td>Opera 欧朋一牛</td></tr><tr><td>安记</td><td><a href="http://www.cssha.com/" target="_blank" rel="noopener">cssha</a></td><td><a href="http://weibo.com/hanan321" target="_blank" rel="noopener">@hanan321</a></td><td><a href="https://github.com/hanan198501" target="_blank" rel="noopener">hanan198501</a></td><td>#</td><td>#</td><td>去哪网一牛</td></tr><tr><td>余弦</td><td><a href="http://evilcos.me/" target="_blank" rel="noopener">EVILCOS</a></td><td><a href="http://weibo.com/evilcos" target="_blank" rel="noopener">余弦</a></td><td><a href="https://github.com/evilcos" target="_blank" rel="noopener">evilcos</a></td><td>#</td><td><a href="http://www.knownsec.com/" target="_blank" rel="noopener">知道创宇</a></td><td>安全（黑客）、架构、团队的各种观点与分享</td></tr></tbody></table><h4 id="一些社区"><a href="#一些社区" class="headerlink" title="一些社区"></a>一些社区</h4><table><thead><tr><th>名称</th><th>地址</th><th>介绍</th></tr></thead><tbody><tr><td>V2EX</td><td><a href="http://v2ex.com/" target="_blank" rel="noopener">http://v2ex.com/</a></td><td>小众活跃社区</td></tr><tr><td>稀土掘进</td><td><a href="https://juejin.im/" target="_blank" rel="noopener">https://juejin.im/</a></td><td>程序员同性交友社区</td></tr><tr><td>知乎</td><td><a href="http://www.zhihu.com/" target="_blank" rel="noopener">http://www.zhihu.com/</a></td><td>综合问答社区</td></tr><tr><td>前端乱炖</td><td><a href="http://www.html-js.com/" target="_blank" rel="noopener">http://www.html-js.com/</a></td><td>专业的前端知识平台</td></tr><tr><td>segmentfault</td><td><a href="http://segmentfault.com/" target="_blank" rel="noopener">http://segmentfault.com/</a></td><td>综合问答社区</td></tr><tr><td>果壳问答</td><td><a href="http://www.guokr.com/ask/pending/" target="_blank" rel="noopener">http://www.guokr.com/ask/pending/</a></td><td>综合问答社区</td></tr><tr><td>Ruby</td><td><a href="http://ruby-china.org/" target="_blank" rel="noopener">http://ruby-china.org/</a></td><td>同 V2EX 氛围类似，不局限于Ruby</td></tr><tr><td>Node.js 中文社区</td><td><a href="http://cnodejs.org/" target="_blank" rel="noopener">http://cnodejs.org/</a></td><td>Node.js 国内最活跃的社区</td></tr><tr><td>Code Wall</td><td><a href="https://coderwall.com/" target="_blank" rel="noopener">https://coderwall.com/</a></td><td>国外技术社区</td></tr><tr><td>DIV.IO</td><td><a href="http://div.io/" target="_blank" rel="noopener">http://div.io/</a></td><td>国内前端技术社区</td></tr><tr><td>w3ctech</td><td><a href="http://www.w3ctech.com/" target="_blank" rel="noopener">http://www.w3ctech.com/</a></td><td>国内前端技术社区，常有一些线下活动发布</td></tr></tbody></table><h4 id="企业官方博客"><a href="#企业官方博客" class="headerlink" title="企业官方博客"></a>企业官方博客</h4><p>在开头我的 Feedly 订阅 opml 文件里比较全面。</p><table><thead><tr><th>名称</th><th>公司</th><th>部门</th><th>活跃度</th><th>简介</th><th>微博</th></tr></thead><tbody><tr><td><a href="http://isux.tencent.com/" target="_blank" rel="noopener">ISUX 社交用户体验设计</a></td><td>腾讯</td><td>ISUX</td><td>★★★★☆</td><td>负责腾讯的社交网络相关产品的用户体验设计与研究。</td><td>#</td></tr><tr><td><a href="http://cdc.tencent.com/" target="_blank" rel="noopener">腾讯 CDC</a></td><td>腾讯</td><td>CDC</td><td>★★★★☆</td><td>简介</td><td>#</td></tr><tr><td><a href="http://www.alloyteam.com/" target="_blank" rel="noopener">腾讯Web前端 Alloy 团队 Blog</a></td><td>腾讯</td><td>SNG</td><td>★★★★☆</td><td>主要负责手机QQ、QQ互联、腾讯Q+、WebQQ项目的团队。</td><td><a href="http://weibo.com/alloyteam" target="_blank" rel="noopener">alloyteam</a></td></tr><tr><td><a href="http://tid.tenpay.com/" target="_blank" rel="noopener">TID-财付通设计中心</a></td><td>腾讯</td><td>TID</td><td>★★★★☆</td><td>简介</td><td>#</td></tr><tr><td><a href="http://mxd.tencent.com/" target="_blank" rel="noopener">腾讯MXD移动互联网设计中心</a></td><td>腾讯</td><td>MXD</td><td>★★★★☆</td><td>简介</td><td><a href="http://e.t.qq.com/tencent_mxd" target="_blank" rel="noopener">@腾讯MXD</a></td></tr><tr><td><a href="https://aotu.io/" target="_blank" rel="noopener">凹凸实验室</a></td><td>京东</td><td>FED</td><td>★★★★★</td><td>简凹凸实验室(Aotu.io，英文简称O2) 始建于2015年10月，是一个年轻基情的技术团队。</td><td>#</td></tr><tr><td><a href="http://udc.weibo.com/" target="_blank" rel="noopener">微博UDC</a></td><td>新浪</td><td>UDC</td><td>★★★★☆</td><td>简介</td><td><a href="http://weibo.com/sudc" target="_blank" rel="noopener">@微博UDC设计中心</a></td></tr><tr><td><a href="http://ued.sina.com.cn/" target="_blank" rel="noopener">新浪UED</a></td><td>新浪</td><td>UED</td><td>★★★★☆</td><td>简介</td><td><a href="http://weibo.com/sudc" target="_blank" rel="noopener">#</a></td></tr><tr><td><a href="http://uedc.163.com/" target="_blank" rel="noopener">网易用户体验设计中心</a></td><td>网易</td><td>UED</td><td>★★★★☆</td><td>简介</td><td><a href="http://weibo.com/sudc" target="_blank" rel="noopener">#</a></td></tr><tr><td><a href="http://www.aliued.cn/" target="_blank" rel="noopener">阿里巴巴（中国站）用户体验设计部博客</a></td><td>阿里巴巴</td><td>UED</td><td>★★★★☆</td><td>简介</td><td><a href="http://weibo.com/aliued" target="_blank" rel="noopener">@Alibaba-UED</a></td></tr><tr><td><a href="http://ued.ctrip.com/blog/" target="_blank" rel="noopener">携程UED-携程旅行前端开发团队</a></td><td>携程网</td><td>UED</td><td>★★★☆☆</td><td>携程UED,携程前端开发团队,UED,Javascript,重构,ux</td><td>#</td></tr><tr><td><a href="http://fex.baidu.com/" target="_blank" rel="noopener">百度FEX</a></td><td>百度</td><td>FEX</td><td>★★★★☆</td><td>百度前端团队Blog,关注前端技术，还更重视全端及全栈的能力。</td><td>#</td></tr><tr><td><a href="http://ued.taobao.org/blog/" target="_blank" rel="noopener">淘宝UED</a></td><td>淘宝网</td><td>UED</td><td>★★★★☆</td><td>用户体验、交互设计、视觉设计、前端技术博客</td><td><a href="http://weibo.com/taobaoued" target="_blank" rel="noopener">@淘宝UED</a></td></tr></tbody></table><h4 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h4><table><thead><tr><th>名称</th><th>作者</th><th>价格</th><th>出版社</th><th>简评</th></tr></thead><tbody><tr><td><a href="http://book.douban.com/subject/3327829/" target="_blank" rel="noopener">Web标准设计</a></td><td>刘杰（嗷嗷）</td><td>RMB 60.00</td><td>清华大学出版社</td><td>基础入门</td></tr><tr><td><a href="http://book.douban.com/subject/4914146/" target="_blank" rel="noopener">大巧不工 : Web前端设计修炼之道</a></td><td>赖定清 / 林坚</td><td>RMB 59.00</td><td>机械工业出版社</td><td>适合入门，了解前端全局</td></tr><tr><td><a href="http://book.douban.com/subject/3132277/" target="_blank" rel="noopener">高性能网站建设指南:前端工程师技能精髓</a></td><td>Steve Souders</td><td>RMB 35.00</td><td>电子工业出版社</td><td>能从原理层理解各种方法</td></tr><tr><td><a href="http://book.douban.com/subject/4719162/" target="_blank" rel="noopener">高性能网站建设指南:Web开发者性能优化最佳实践</a></td><td>Steve Souders</td><td>RMB 49.80</td><td>电子工业出版社</td><td>#</td></tr><tr><td><a href="http://book.douban.com/subject/4124141/" target="_blank" rel="noopener">Web站点优化 : Web站点优化</a></td><td>金</td><td>RMB 55.00</td><td>#</td><td>#</td></tr><tr><td><a href="http://book.douban.com/subject/10789820/" target="_blank" rel="noopener">Node.js开发指南</a></td><td>郭家寶</td><td>RMB 45.00</td><td>#</td><td>作者很牛</td></tr><tr><td><a href="http://book.douban.com/subject/10546125/" target="_blank" rel="noopener">JavaScript高级程序设计</a></td><td>Nicholas C. Zakas</td><td>RMB 99.00</td><td>人民邮电出版社</td><td>适合没事就翻翻</td></tr><tr><td><a href="http://book.douban.com/subject/2228378/" target="_blank" rel="noopener">JavaScript权威指南</a></td><td>弗拉纳根</td><td>RMB 109.00</td><td>机械工业出版社</td><td>犀牛书</td></tr><tr><td><a href="http://book.douban.com/subject/3590768/" target="_blank" rel="noopener">JavaScript语言精粹</a></td><td>Douglas Crockford</td><td>RMB 35.00</td><td>电子工业出版社</td><td>绝对经典，相信看完后，对Javascript这门语言有了重新认识，原来这个语言是这么的美丽！</td></tr><tr><td><a href="http://book.douban.com/subject/25768396/" target="_blank" rel="noopener">深入浅出node.js</a></td><td>朴灵</td><td>RMB 69.00</td><td>人民邮电出版社</td><td>一本从前端通往全端的好书</td></tr><tr><td><a href="http://book.douban.com/subject/3137282/" target="_blank" rel="noopener">CSS开发王</a></td><td>张亚飞</td><td>RMB 49.00</td><td>电子工业出版社</td><td>适合有一定基础后CSS进阶用</td></tr><tr><td><a href="http://book.douban.com/subject/6038371/" target="_blank" rel="noopener">JavaScript DOM编程艺术</a></td><td>Jeremy Keith /Jeffrey Sambells</td><td>RMB 49.00</td><td>人民邮电出版社</td><td>适合Javascript入门看</td></tr></tbody></table><h4 id="线上文档参考"><a href="#线上文档参考" class="headerlink" title="线上文档参考"></a>线上文档参考</h4><table><thead><tr><th>书名</th><th>地址</th><th>作者</th><th>译者</th><th>介绍</th></tr></thead><tbody><tr><td>JavaScript秘密花园</td><td><a href="http://bonsaiden.github.io/JavaScript-Garden/zh/" target="_blank" rel="noopener">http://bonsaiden.github.io/JavaScript-Garden/zh/</a></td><td>伊沃·韦特泽尔&amp;张易江</td><td><a href="http://sanshi.me/" target="_blank" rel="noopener">三生石上</a></td><td>完整书籍，界面美观，有详细demo</td></tr><tr><td>Material Design 中文版</td><td><a href="http://design.1sters.com/" target="_blank" rel="noopener">http://design.1sters.com/</a></td><td>Google设计手册</td><td>协同翻译</td><td>Google I/O 2014 发布的 Material Design 官方手册的中文翻译</td></tr><tr><td><a href="https://github.com/nightire" target="_blank" rel="noopener">@nightire </a>分享</td><td><a href="https://ruby-china.org/topics/29354" target="_blank" rel="noopener">https://ruby-china.org/topics/29354</a></td><td>计算机开放电子书汇总</td><td>中文</td><td>#</td></tr><tr><td><a href="https://github.com/nightire" target="_blank" rel="noopener">@nightire </a>分享</td><td><a href="https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books-zh.md" target="_blank" rel="noopener">https://github.com/EbookFoundation/free-programming-books/blob/master/free-programming-books-zh.md</a></td><td>#</td><td>#</td><td>#</td></tr></tbody></table><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><p>本 repo 会不断更新，感谢推荐和分享新资源的朋友。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://www.ruanyifeng.com/images_pub/pub_222.jpg&quot; style=&quot;width:650px&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;分享干货（每周更新）&quot;&gt;&lt;a href=&quot;#分享干货（每周更新）&quot; class=&quot;headerlink&quot; title=&quot;分享干货（每周更新）&quot;&gt;&lt;/a&gt;分享干货（每周更新）&lt;/h2&gt;
    
    </summary>
    
    
      <category term="干货" scheme="http://huwenzhe.com/tags/%E5%B9%B2%E8%B4%A7/"/>
    
  </entry>
  
  <entry>
    <title>数组reduce()方法</title>
    <link href="http://huwenzhe.com/2017/11/13/%E6%95%B0%E7%BB%84reduce()%E6%96%B9%E6%B3%95/"/>
    <id>http://huwenzhe.com/2017/11/13/数组reduce()方法/</id>
    <published>2017-11-12T16:00:00.000Z</published>
    <updated>2018-04-03T01:48:17.315Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1509187120929&di=a7c8f4ac1fa4f8dacaae9cc3d36ece92&imgtype=0&src=http%3A%2F%2Fs4.51cto.com%2Fwyfs02%2FM01%2F7A%2F06%2FwKioL1ag_yXxUmU2AAAWKZzaCwQ084.png" style="width:650px"><br>很多时候需要累加数组项的得到一个值(比如说求和)。如果你碰到一个类似的问题，你想到的方法是什么呢？会不会和我一样，想到的就是使用<strong>for</strong>或<strong>while</strong>循环，对数组进行迭代，依次将他们的值加起来。比如：</p><a id="more"></a><p>for写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line">Array.prototype.sum = function () &#123;</span><br><span class="line">    var sumResult = 0;</span><br><span class="line">    for (var i = 0; i &lt; this.length; i++) &#123;</span><br><span class="line">        sumResult += parseInt(this[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return sumResult;</span><br><span class="line">&#125;</span><br><span class="line">arr.sum();//28</span><br></pre></td></tr></table></figure></p><p>while写法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line">Array.prototype.sum = function () &#123;</span><br><span class="line">    var sumResult = 0,i = this.length;</span><br><span class="line">    while (i--) &#123;</span><br><span class="line">        sumResult += parseInt(this[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return sumResult;</span><br><span class="line">&#125;</span><br><span class="line">arr.sum();//28</span><br></pre></td></tr></table></figure></p><p>然后对比一下两种方法运行的时间</p><p>for所耗时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">console.time(&quot;time&quot;);</span><br><span class="line">var arr = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line">Array.prototype.sum = function ()&#123;</span><br><span class="line">        var sumResult = 0;</span><br><span class="line">        for (var j = 0; j &lt; this.length; j++) &#123;</span><br><span class="line">            sumResult += parseInt(this[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    return sumResult;</span><br><span class="line">&#125;</span><br><span class="line">arr.sum();//28</span><br><span class="line">console.timeEnd(&quot;time&quot;);</span><br><span class="line">//node &gt;&gt; 2.877ms</span><br><span class="line">//chrome &gt;&gt; 4.68505859375ms</span><br></pre></td></tr></table></figure></p><p>while所耗时间<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">console.time(&quot;time&quot;);</span><br><span class="line">var arr = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line">Array.prototype.sum = function () &#123;</span><br><span class="line">        var sumResult = 0;</span><br><span class="line">        for (var j = 0; j &lt; this.length; j++) &#123;</span><br><span class="line">            sumResult += parseInt(this[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    return sumResult;</span><br><span class="line">&#125;</span><br><span class="line">arr.sum();//28</span><br><span class="line">console.timeEnd(&quot;time&quot;);</span><br><span class="line">//node &gt;&gt; 2.956ms</span><br><span class="line">//chrome &gt;&gt; time: 4.793701171875ms</span><br></pre></td></tr></table></figure></p><h5 id="reduce-方法"><a href="#reduce-方法" class="headerlink" title="reduce()方法"></a>reduce()方法</h5><p><strong>reduce()</strong>方法接收一个函数<strong>callbackfn</strong>作为累加器（accumulator），数组中的每个值（从左到右）开始合并，最终为一个值。</p><h6 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.reduce(callbackfn,[initialValue])</span><br></pre></td></tr></table></figure><p><strong>reduce()</strong>方法接收<strong>callbackfn</strong>函数，而这个函数包含四个参数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function callbackfn(preValue,curValue,index,array)&#123;&#125;</span><br></pre></td></tr></table></figure></p><ul><li><strong>preValue</strong>: 上一次调用回调返回的值，或者是提供的初始值（initialValue）</li><li><strong>curValue</strong>: 数组中当前被处理的数组项</li><li><strong>index</strong>: 当前数组项在数组中的索引值</li><li><strong>array</strong>: 调用 <strong>reduce()</strong>方法的数组</li></ul><p>直接上例子（这样直观看得懂）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [0, 1, 2, 3, 4];</span><br><span class="line">arr.reduce(function (preValue, curValue, index, array) &#123;</span><br><span class="line">    return preValue + curValue;</span><br><span class="line">&#125;);//10</span><br></pre></td></tr></table></figure></p><table><thead><tr><th></th><th style="text-align:center">preValue</th><th style="text-align:center">curValue</th><th style="text-align:center">index</th><th style="text-align:center">array</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td>第一次回调</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">[0,1,2,3,4]</td><td style="text-align:center">1</td></tr><tr><td>第二次回调</td><td style="text-align:center">1</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">[0,1,2,3,4]</td><td style="text-align:center">3</td></tr><tr><td>第三次回调</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">[0,1,2,3,4]</td><td style="text-align:center">6</td></tr><tr><td>第四次回调</td><td style="text-align:center">6</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">[0,1,2,3,4]</td><td style="text-align:center">10</td></tr></tbody></table><p>上面的示例<strong>reduce()</strong>方法没有提供<strong>initialValue</strong>初始值，接下来再上面的示例中，稍作修改，提供一个初始值，这个值为5。这个时候<strong>reduce()</strong>方法会执行五次回调，每次参数和返回的值如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var arr = [0, 1, 2, 3, 4];</span><br><span class="line">arr.reduce(function (preValue, curValue, index, array) &#123;</span><br><span class="line">    return preValue + curValue;</span><br><span class="line">&#125;, 5);//15</span><br></pre></td></tr></table></figure></p><table><thead><tr><th></th><th style="text-align:center">preValue</th><th style="text-align:center">curValue</th><th style="text-align:center">index</th><th style="text-align:center">array</th><th style="text-align:center">返回值</th></tr></thead><tbody><tr><td>第一次回调</td><td style="text-align:center">5</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">[0,1,2,3,4]</td><td style="text-align:center">5</td></tr><tr><td>第一次回调</td><td style="text-align:center">5</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">[0,1,2,3,4]</td><td style="text-align:center">6</td></tr><tr><td>第二次回调</td><td style="text-align:center">6</td><td style="text-align:center">2</td><td style="text-align:center">2</td><td style="text-align:center">[0,1,2,3,4]</td><td style="text-align:center">8</td></tr><tr><td>第三次回调</td><td style="text-align:center">8</td><td style="text-align:center">3</td><td style="text-align:center">3</td><td style="text-align:center">[0,1,2,3,4]</td><td style="text-align:center">11</td></tr><tr><td>第四次回调</td><td style="text-align:center">11</td><td style="text-align:center">4</td><td style="text-align:center">4</td><td style="text-align:center">[0,1,2,3,4]</td><td style="text-align:center">15</td></tr></tbody></table><p>这样一来，不用多说，应该都知道，可以使用<strong>reduce()</strong>实现数组求和的功能。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5, 6, 7];</span><br><span class="line">Array.prototype.sum = function () &#123;</span><br><span class="line">    var sumResult = 0;</span><br><span class="line">    return this.reduce(function (preValue, curValue) &#123;</span><br><span class="line">        return sumResult = preValue + curValue;</span><br><span class="line">    &#125;);</span><br><span class="line">    return sumResult;</span><br><span class="line">&#125;</span><br><span class="line">arr.sum();//28</span><br></pre></td></tr></table></figure></p><p>回到文章的前面，来看看使用<strong>reduce()</strong>方法对数组求和，需要多少时间：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1, 2, 3, 4, 5, 6];</span><br><span class="line">console.time(&quot;ruduce&quot;);</span><br><span class="line">Array.prototype.sum = function () &#123;</span><br><span class="line">        return this.reduce(function (preValue, curValue) &#123;</span><br><span class="line">            return preValue + curValue;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line">arr.sum();</span><br><span class="line">console.timeEnd(&quot;ruduce&quot;);</span><br><span class="line">//node &gt;&gt; 0.173ms</span><br><span class="line">//chrome &gt;&gt; time: 0.117919921875ms</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>循环类型</th><th style="text-align:center">最终值(和)</th><th style="text-align:center">所费时间(node)</th><th style="text-align:center">所费时间(chrome)</th></tr></thead><tbody><tr><td>for</td><td style="text-align:center">21</td><td style="text-align:center">2.877ms</td><td style="text-align:center">4.68505859375ms</td></tr><tr><td>while</td><td style="text-align:center">21</td><td style="text-align:center">2.956ms</td><td style="text-align:center">4.793701171875ms</td></tr><tr><td>reduce</td><td style="text-align:center">21</td><td style="text-align:center">0.173ms</td><td style="text-align:center">0.117919921875ms</td></tr></tbody></table><blockquote><p>引用：<a href="http://www.w3cplus.com/javascript/array-part-8.html" target="_blank" rel="noopener">大漠</a><br><strong>reduceRight()</strong>方法的功能和<strong>reduce()</strong>功能是一样的，不同的是<strong>reduceRight()</strong>从数组的末尾向前将数组中的数组项做累加。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1509187120929&amp;di=a7c8f4ac1fa4f8dacaae9cc3d36ece92&amp;imgtype=0&amp;src=http%3A%2F%2Fs4.51cto.com%2Fwyfs02%2FM01%2F7A%2F06%2FwKioL1ag_yXxUmU2AAAWKZzaCwQ084.png&quot; style=&quot;width:650px&quot;&gt;&lt;br&gt;很多时候需要累加数组项的得到一个值(比如说求和)。如果你碰到一个类似的问题，你想到的方法是什么呢？会不会和我一样，想到的就是使用&lt;strong&gt;for&lt;/strong&gt;或&lt;strong&gt;while&lt;/strong&gt;循环，对数组进行迭代，依次将他们的值加起来。比如：&lt;/p&gt;
    
    </summary>
    
    
      <category term="array" scheme="http://huwenzhe.com/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>Struts2教程</title>
    <link href="http://huwenzhe.com/2017/11/10/Struts2%E6%95%99%E7%A8%8B/"/>
    <id>http://huwenzhe.com/2017/11/10/Struts2教程/</id>
    <published>2017-11-09T16:00:00.000Z</published>
    <updated>2018-04-02T07:14:04.737Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1504881745545&di=3371011c647ff021a46c624c2346f436&imgtype=jpg&src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D2155418164%2C3239937833%26fm%3D214%26gp%3D0.jpg" style="width:521px;height:521px;"></p><h3 id="Apache-Struts-2-是一种流行的-Java模型-视图-控制器（MVC）框架，成功地结合了-WebWork和Struts1-x-两种-web-框架。"><a href="#Apache-Struts-2-是一种流行的-Java模型-视图-控制器（MVC）框架，成功地结合了-WebWork和Struts1-x-两种-web-框架。" class="headerlink" title="Apache Struts 2 是一种流行的 Java模型 - 视图 - 控制器（MVC）框架，成功地结合了 WebWork和Struts1.x 两种 web 框架。"></a>Apache Struts 2 是一种流行的 Java模型 - 视图 - 控制器（MVC）框架，成功地结合了 WebWork和Struts1.x 两种 web 框架。</h3><p><strong>注：我只是文章的搬运工，按照自己快速过的原则归类，如需了解详情，请移步至参考原文</strong><br><a id="more"></a><br><a href="http://www.yiibai.com/struts_2/" target="_blank" rel="noopener">参考：http://www.yiibai.com/struts_2/</a></p><ul><li><span style="color:red;">Struts 2 UI标签</span></li><li>Struts 2 控制标签(if,else,sort,generator,merge,append等同标准标签库或类似)</li><li>Struts2 数据标签(action,include,param,url,set,push等)</li></ul><h6 id="UI标签-lt-s-textfield-gt-文本示例"><a href="#UI标签-lt-s-textfield-gt-文本示例" class="headerlink" title="UI标签-&lt;s:textfield&gt;文本示例"></a>UI标签-<code>&lt;s:textfield&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-stextfield-textbox-example.html" target="_blank" rel="noopener">文本示例</a></h6><ul><li>创建一个HTML文本框输入字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=&quot;registerUser&quot; namespace=&quot;/user&quot;&gt;</span><br><span class="line">&lt;s:textfield label=&quot;Username&quot; name=&quot;username&quot; /&gt;</span><br><span class="line">&lt;s:submit key=&quot;submit&quot; name=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://www.yiibai.com/uploads/tutorial/20151114/1-1511141619403Y.png" alt="文本示例"></p><h6 id="UI标签-lt-s-password-gt-密码示例"><a href="#UI标签-lt-s-password-gt-密码示例" class="headerlink" title="UI标签-&lt;s:password&gt;密码示例"></a>UI标签-<code>&lt;s:password&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-spassword-password-example.html" target="_blank" rel="noopener">密码示例</a></h6><ul><li>创建HTML密码字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=&quot;registerUser&quot; namespace=&quot;/user&quot;&gt;</span><br><span class="line">&lt;s:textfield key=&quot;username&quot; /&gt;</span><br><span class="line">&lt;s:password key=&quot;password&quot; /&gt;</span><br><span class="line">&lt;s:password key=&quot;confirmPassword&quot; /&gt;</span><br><span class="line">&lt;s:submit key=&quot;submit&quot; name=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://www.yiibai.com/uploads/tutorial/20151114/1-1511141AFD03.png" alt="密码示例"></p><h6 id="UI标签-lt-s-hidden-gt-隐藏值例子"><a href="#UI标签-lt-s-hidden-gt-隐藏值例子" class="headerlink" title="UI标签-&lt;s:hidden&gt;隐藏值例子"></a>UI标签-<code>&lt;s:hidden&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-shidden-hidden-value-example.html" target="_blank" rel="noopener">隐藏值例子</a></h6><ul><li>创建一个HTML隐藏字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=&quot;helloHidden&quot; namespace=&quot;/&quot;&gt;</span><br><span class="line">&lt;h2&gt;This page has a hidden value (view source):</span><br><span class="line">&lt;s:hidden name=&quot;url&quot; value=&quot;http://www.yiibai.com&quot; /&gt;&lt;/h2&gt;</span><br><span class="line">&lt;s:submit value=&quot;submit&quot; name=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://www.yiibai.com/uploads/tutorial/20151114/1-1511141K620512.png" alt="隐藏值例子"></p><h6 id="UI标签-lt-s-textarea-gt-文本域实例"><a href="#UI标签-lt-s-textarea-gt-文本域实例" class="headerlink" title="UI标签-&lt;s:textarea&gt;文本域实例"></a>UI标签-<code>&lt;s:textarea&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-stextarea-textarea-example.html" target="_blank" rel="noopener">文本域实例</a></h6><ul><li>创建一个textarea文本域字段。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=&quot;helloTextarea&quot; namespace=&quot;/&quot;&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">  &lt;s:textarea label=&quot;Address&quot; name=&quot;address&quot; cols=&quot;40&quot; rows=&quot;10&quot;/&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;s:submit value=&quot;submit&quot; name=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure></li></ul><p><img src="http://www.yiibai.com/uploads/tutorial/20151114/1-1511141Q545291.png" alt="文本域实例"></p><h6 id="UI标签-lt-s-radio-gt-单选按钮例子"><a href="#UI标签-lt-s-radio-gt-单选按钮例子" class="headerlink" title="UI标签-&lt;s:radio&gt;单选按钮例子"></a>UI标签-<code>&lt;s:radio&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-sradio-radio-button-example.html" target="_blank" rel="noopener">单选按钮例子</a></h6><ul><li>创建一个单选按钮。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=&quot;resultAction&quot; namespace=&quot;/&quot;&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">  &lt;s:radio label=&quot;Gender&quot; name=&quot;yourGender&quot; list=&quot;genders&quot; value=&quot;defaultGenderValue&quot; /&gt;</span><br><span class="line">  &lt;s:radio label=&quot;Gender&quot; name=&quot;yourLanguage&quot; list=&quot;languages&quot;</span><br><span class="line">      listKey=&quot;languageCode&quot; listValue=&quot;languageDisplay&quot; value=&quot;defaultLanguageValue&quot; /&gt;</span><br><span class="line">  &lt;s:radio label=&quot;Answer&quot; name=&quot;yourAnswer&quot; list=&quot;#&#123;&apos;1&apos;:&apos;Yes&apos;,&apos;2&apos;:&apos;No&apos;&#125;&quot; value=&quot;2&quot; /&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;s:submit value=&quot;submit&quot; name=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>languages = new ArrayList<language>();<br>languages.add( new Language(“EN”, “English”) );</language></p></blockquote><p><img src="http://www.yiibai.com/uploads/tutorial/20151114/1-151114214953A6.png" alt="单选按钮例子"></p><h6 id="UI标签-lt-s-checkboxlist-gt-多个复选框例子"><a href="#UI标签-lt-s-checkboxlist-gt-多个复选框例子" class="headerlink" title="UI标签-&lt;s:checkboxlist&gt;多个复选框例子"></a>UI标签-<code>&lt;s:checkboxlist&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-scheckboxlist-multiple-check-boxes-example.html" target="_blank" rel="noopener">多个复选框例子</a></h6><ul><li>用相同的名称创建多个复选框，存储检选中的值，并在另一页面中显示。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=&quot;resultAction&quot; namespace=&quot;/&quot;&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">&lt;s:checkboxlist label=&quot;What&apos;s your favor color&quot; list=&quot;colors&quot;</span><br><span class="line">   name=&quot;yourColor&quot; value=&quot;defaultColor&quot; /&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;s:submit value=&quot;submit&quot; name=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><code>&lt;s:checkbox&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-scheckbox-checkbox-example.html" target="_blank" rel="noopener">单个复选框例子</a><code>&lt;s:checkbox name=&quot;checkMe&quot; fieldValue=&quot;true&quot; label=&quot;Check Me for testing&quot;/&gt;</code></p></blockquote><p><img src="http://www.yiibai.com/uploads/tutorial/20151115/1-15111509413V16.png" alt="多个复选框例子"></p><h6 id="UI标签-lt-s-select-gt-下拉框例子"><a href="#UI标签-lt-s-select-gt-下拉框例子" class="headerlink" title="UI标签-&lt;s:select&gt;下拉框例子"></a>UI标签-<code>&lt;s:select&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-sselect-drop-down-box-example.html" target="_blank" rel="noopener">下拉框例子</a></h6><ul><li>创建一个HTML下拉框。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=&quot;resultAction&quot; namespace=&quot;/&quot;&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">&lt;s:select label=&quot;What&apos;s your favor search engine&quot;</span><br><span class="line">headerKey=&quot;-1&quot; headerValue=&quot;Select Search Engines&quot;</span><br><span class="line">list=&quot;searchEngine&quot;</span><br><span class="line">name=&quot;yourSearchEngine&quot;</span><br><span class="line">value=&quot;defaultSearchEngine&quot; /&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">&lt;s:select label=&quot;Select a month&quot;</span><br><span class="line">headerKey=&quot;-1&quot; headerValue=&quot;Select Month&quot;</span><br><span class="line">list=&quot;#&#123;&apos;1&apos;:&apos;Jan&apos;, &apos;2&apos;:&apos;Feb&apos;, &apos;3&apos;:&apos;Mar&apos;, &apos;4&apos;:&apos;Apr&apos;&#125;&quot;</span><br><span class="line">name=&quot;yourMonth&quot;</span><br><span class="line">value=&quot;2&quot; /&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;s:submit value=&quot;submit&quot; name=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>“headerKey”是一个在下拉列表中项用来表示键，而“headerValue”是在下拉列表中的项目表示值。</p></blockquote><p><img src="http://www.yiibai.com/uploads/tutorial/20151115/1-151115102K4293.png" alt="下拉框例子"></p><h6 id="UI标签-lt-s-combobox-gt-组合框的例子"><a href="#UI标签-lt-s-combobox-gt-组合框的例子" class="headerlink" title="UI标签-&lt;s:combobox&gt;组合框的例子"></a>UI标签-<code>&lt;s:combobox&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-scombobox-combo-box-example.html" target="_blank" rel="noopener">组合框的例子</a></h6><ul><li>是一个下拉列表单和文本框组合在一起，允许用户直接输入一个值在文本框中，或选择从下拉列表中选择值，并选定值将自动填充到文本框中。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;s:form action=&quot;resultAction&quot; namespace=&quot;/&quot;&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">&lt;s:combobox label=&quot;What&apos;s your favor fruit&quot;</span><br><span class="line">headerKey=&quot;-1&quot; headerValue=&quot;--- Select ---&quot;</span><br><span class="line">list=&quot;fruits&quot;</span><br><span class="line">name=&quot;yourFruits&quot; /&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;h2&gt;</span><br><span class="line">&lt;s:combobox label=&quot;Select a month&quot;</span><br><span class="line">headerKey=&quot;-1&quot; headerValue=&quot;--- Select ---&quot;</span><br><span class="line">list=&quot;#&#123;&apos;1&apos;:&apos;Jan&apos;, &apos;2&apos;:&apos;Feb&apos;, &apos;3&apos;:&apos;Mar&apos;, &apos;4&apos;:&apos;Apr&apos;&#125;&quot;</span><br><span class="line">name=&quot;yourMonth&quot; /&gt;</span><br><span class="line">&lt;/h2&gt;</span><br><span class="line">&lt;s:submit value=&quot;submit&quot; name=&quot;submit&quot; /&gt;</span><br><span class="line">&lt;/s:form&gt;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>“headerKey”是一个在下拉列表中项用来表示键，而“headerValue”是在下拉列表中的项目表示值。<br><img src="http://www.yiibai.com/uploads/tutorial/20151115/1-151115125329152.png" alt="组合框的例子"></p></blockquote><p>不常用的还有<br><br><code>&lt;s:file&gt;</code>文件上传<br><br><code>&lt;s:doubleselect&gt;</code>级联选择<br><br><code>&lt;s:updownselect&gt;,</code><a href="http://www.yiibai.com/uploads/tutorial/20151115/1-1511151A609520.png" target="_blank" rel="noopener">上下选择框</a><br><br><code>&lt;s:optiontransferselect&gt;</code><a href="http://www.yiibai.com/uploads/tutorial/20151115/1-1511151I350492.png" target="_blank" rel="noopener">左右选择框</a><br><br><code>&lt;sx:datetimepicker&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-datetimepicker-example.html" target="_blank" rel="noopener">日期选择框</a><br><br><code>&lt;sx:autocompleter&gt;</code><a href="http://www.yiibai.com/struts_2/struts-2-autocompleter-example.html" target="_blank" rel="noopener">自动提示</a><br></p><h3 id="Struts-2-控制标签"><a href="#Struts-2-控制标签" class="headerlink" title="Struts 2 控制标签"></a>Struts 2 控制标签</h3><ul><li>用来做条件处理，迭代，处理和显示数据。<br><code>&lt;s:iterator&gt;</code><br>Struts2迭代器标签用来迭代一个值，它可以是任何的 java.util.Collection 或 java.util.Iterator<br><br><code>&lt;s:if&gt;, &lt;s:elseIf&gt;, &lt;s:else&gt;</code><br>Struts2 if,elseif和else标签被用来执行基本条件检查。<br><br><code>&lt;s:append&gt;</code><br>Struts2 <code>&lt;s:append&gt;</code>标签用来组合几个迭代器（由列表或映射创建）到一个迭代器<br><br><code>&lt;s:generator&gt;</code><br>struts2 <code>&lt;s:generator&gt;</code>标记用于基于在页中提供“val”属性，以产生一个迭代。<br><br><code>&lt;s:merge&gt;</code><br>Struts2 <code>&lt;s:merge&gt;</code>标签用来合并几个迭代器（以列表或映射创建）成一个迭代器。<br><br><code>&lt;s:sort&gt;</code><br>Struts2 <code>&lt;s:sort&gt;</code>是用于排序一个列表，它通过使用 java.util.Comparator 来实现。<br><br>subset tag example<br>Struts2 <code>&lt;s:subset&gt;</code>标记用于输出一个迭代元素的子集或部分。&lt;br</li></ul><h3 id="Struts2-数据标签"><a href="#Struts2-数据标签" class="headerlink" title="Struts2 数据标签"></a>Struts2 数据标签</h3><p><code>&lt;s:a&gt;</code><br>Struts2的<code>&lt;s:a&gt;</code>标签被用于渲染HTML的<code>&lt;a&gt;</code>标签。<br><br><code>&lt;s:action&gt;</code><br>Struts2的<code>&lt;s:action&gt;</code>标签用来直接在一个JSP页面中调用Action类<br><br><code>&lt;s:bean&gt;</code><br>Struts2的<code>&lt;s:bean&gt;</code>标签用来在JSP页面中实例化一个类<br><br><code>&lt;s:date&gt;</code><br>Struts2的<code>&lt;s:date&gt;</code>标签用来在JSP页面格式Date对象。<br><br><code>&lt;s:debug&gt;</code><br>Struts 2的<code>&lt;s:debug&gt;</code>标签是一个非常有用的调试标记，用于输出“值栈”的内容，并在JSP页面中输出“堆栈上下文”的详细信息。<br><br><code>&lt;s:include&gt;</code><br>Struts 2的<code>&lt;s:include&gt;</code>标签用来直接包含JSP或HTML页面到当前页面。<br><br><code>&lt;s:i18n&gt;</code><br>Struts 2的<code>&lt;s:i18n&gt;</code>标签用来获取声明的资源包，而不仅仅是资源包，也可获取当前操作相关联的消息。<br><br><code>&lt;s:param&gt;</code><br>Struts2的<code>&lt;s:param&gt;</code>标签用来参数化其他标签。<br><br><code>&lt;s:property&gt;</code><br>Struts2的<code>&lt;s:property&gt;</code>标签用来从一个类获取当前默认Action类的属性值。<br><br><code>&lt;s:push&gt;</code><br>Struts2的<code>&lt;s:push&gt;</code>标签用来推值到堆栈的顶部，以便它可以容易访问或参考。<br><br><code>&lt;s:set&gt;</code><br>Struts2的<code>&lt;s:set&gt;</code>标签用来在指定的范围内（应用，会话，请求，页面，或动作）赋值给一个变量。<br><br><code>&lt;s:text&gt;</code><br>Struts2的<code>&lt;s:text&gt;</code>标签用于从操作类取出资源包消息<br><br><code>&lt;s:url&gt;</code><br>Struts2的<code>&lt;s:url&gt;</code>标签用来创建一个URL，并输出作为文本格式</p><p>end</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1504881745545&amp;di=3371011c647ff021a46c624c2346f436&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D2155418164%2C3239937833%26fm%3D214%26gp%3D0.jpg&quot; style=&quot;width:521px;height:521px;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Apache-Struts-2-是一种流行的-Java模型-视图-控制器（MVC）框架，成功地结合了-WebWork和Struts1-x-两种-web-框架。&quot;&gt;&lt;a href=&quot;#Apache-Struts-2-是一种流行的-Java模型-视图-控制器（MVC）框架，成功地结合了-WebWork和Struts1-x-两种-web-框架。&quot; class=&quot;headerlink&quot; title=&quot;Apache Struts 2 是一种流行的 Java模型 - 视图 - 控制器（MVC）框架，成功地结合了 WebWork和Struts1.x 两种 web 框架。&quot;&gt;&lt;/a&gt;Apache Struts 2 是一种流行的 Java模型 - 视图 - 控制器（MVC）框架，成功地结合了 WebWork和Struts1.x 两种 web 框架。&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;注：我只是文章的搬运工，按照自己快速过的原则归类，如需了解详情，请移步至参考原文&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="JSP" scheme="http://huwenzhe.com/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>React基础(非es6写法)</title>
    <link href="http://huwenzhe.com/2017/10/20/React%E5%9F%BA%E7%A1%80/"/>
    <id>http://huwenzhe.com/2017/10/20/React基础/</id>
    <published>2017-10-19T16:00:00.000Z</published>
    <updated>2018-04-02T07:14:04.799Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-gold-cdn.xitu.io/2017/6/27/c286966135b9f890967438fe390a8c01" width="650" height="370" alt="react" align="center"></p><h1 id="1-什么是react"><a href="#1-什么是react" class="headerlink" title="1. 什么是react"></a>1. 什么是react</h1><h2 id="React-是一个用于构建用户界面的JavaScript库"><a href="#React-是一个用于构建用户界面的JavaScript库" class="headerlink" title="React 是一个用于构建用户界面的JavaScript库;"></a>React 是一个用于构建用户界面的JavaScript库;</h2><a id="more"></a><h1 id="2-安装react"><a href="#2-安装react" class="headerlink" title="2. 安装react"></a>2. 安装react</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower install react babel --save</span><br></pre></td></tr></table></figure><h1 id="3-直接在浏览器中使用React"><a href="#3-直接在浏览器中使用React" class="headerlink" title="3. 直接在浏览器中使用React"></a>3. 直接在浏览器中使用React</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//react.js 是 React 的核心库</span><br><span class="line">&lt;script src=<span class="string">"./bower_components/react/react.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">//react-dom.js 是提供与DOM相关的功能,会在window下增加ReactDOM属性</span><br><span class="line">&lt;script src=<span class="string">"./bower_components/react/react-dom.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">//browser.js 的作用是将JSX语法转为JavaScript语法</span><br><span class="line">&lt;script src=<span class="string">"./bower_components/babel/browser.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><strong>script中的type属性为text/babel,因为React独有的JSX语法,跟JavaScript不兼容</strong></p><h1 id="4-ReactDOM-render-点击运行DEMO"><a href="#4-ReactDOM-render-点击运行DEMO" class="headerlink" title="4. ReactDOM.render*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index1.html">4. ReactDOM.render</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"app"</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/babel"</span> src=<span class="string">"js/1.react.js"</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">&lt;h1&gt;广州大麦电商&lt;/h1&gt;,</span><br><span class="line">document.getElementById(<span class="string">'app'</span>);</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>上面代码将一个h1标题，插入app元素内部</strong></p><h1 id="5-JSX-语法-点击运行DEMO"><a href="#5-JSX-语法-点击运行DEMO" class="headerlink" title="5. JSX 语法*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index2.html">5. JSX 语法</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h1><p><strong>是一种JS和HTML混合的语法,将组件的结构、数据甚至样式都聚合在一起定义组件,会编译成普通的Javascript。</strong><br>-遇到HTML标签(以 &lt; 开头)，就用HTML规则解析<br>-遇到代码块(以 { 开头)，就用JavaScript规则解析<br>-使用样式时可以让style等于一个样式对象<br>-使用样式类时只能使用className=类名,因为class是Javascript关键字<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var persons = [<span class="string">'刘德华'</span>, <span class="string">'范冰冰'</span>, <span class="string">'郭跃'</span>];</span><br><span class="line">var style = &#123;color:<span class="string">'red'</span>,<span class="string">'font-size'</span>:<span class="string">'20px'</span>&#125;;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&#123;</span><br><span class="line">persons.map(<span class="keyword">function</span> (person) &#123;</span><br><span class="line"><span class="built_in">return</span> &lt;div style=&#123;style&#125;&gt;Hello, &#123;person&#125;!&lt;/div&gt;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/div&gt;,</span><br><span class="line">document.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="6-1-定义组件-点击运行DEMO"><a href="#6-1-定义组件-点击运行DEMO" class="headerlink" title="6.1 定义组件*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index3.html">6.1 定义组件</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h2><p>====<br><strong>React允许将代码封装成组件，然后像插入普通HTML标签一样，在网页中插入这个组件</strong></p><ul><li>组件类的第一个字母必须大写</li><li>组件类能且只能包含一个顶层标签<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var Message = React.createClass(&#123;</span><br><span class="line">render: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> &lt;h1&gt;HelloWorld!&lt;/h1&gt;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Message/&gt;,</span><br><span class="line">document.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>====</p><h2 id="6-2-组件的属性-点击运行DEMO"><a href="#6-2-组件的属性-点击运行DEMO" class="headerlink" title="6.2 组件的属性*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index4.html">6.2 组件的属性</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h2><ul><li>属性一般用作组件的数据源，一般由父组件传入,比如你的名字一般是由你父母取的</li><li>属性可以通过<strong>this.props</strong>中取出</li><li><strong>propTypes</strong>可以用来定义传入组件属性的名称和类型</li><li><strong>getDefaultProps</strong>函数可以用来定会引起组件的默认属性<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">var Person = React.createClass(&#123;</span><br><span class="line">    //类似于约定了一个接口文档,用于这是验证传递给组件的属性.</span><br><span class="line">    propTypes: &#123;</span><br><span class="line">        //定义msg的属性类型为字符串，必须传入</span><br><span class="line">        name: React.PropTypes.string.isRequired,</span><br><span class="line">        gender: React.PropTypes.string.isRequired,</span><br><span class="line">        age:React.PropTypes.number.isRequired</span><br><span class="line">    &#125;,</span><br><span class="line">    getDefaultProps:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;name:<span class="string">'无名氏'</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        //属性可以通过属性对象this.props中取出</span><br><span class="line">        <span class="built_in">return</span> (&lt;div&gt;</span><br><span class="line">                     &#123;this.props.name&#125;</span><br><span class="line">                     &#123;this.props.gender&#125;</span><br><span class="line">                     &#123;this.props.age&#125;</span><br><span class="line">                &lt;/div&gt;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var props = &#123;</span><br><span class="line">    gender:<span class="string">'男'</span>,</span><br><span class="line">    age:18</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Person &#123;...props&#125; /&gt;,//属性可以在使用组件时传入</span><br><span class="line">    document.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>====</p><h2 id="6-3-this-props-children-点击运行DEMO"><a href="#6-3-this-props-children-点击运行DEMO" class="headerlink" title="6.3 this.props.children*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index5.html">6.3 this.props.children</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h2><p><strong>this.props</strong>对象的属性与组件实例的属性一一对应,但<strong>this.props.children</strong>属性表示组件的所有子节点 <strong>React.Children.map</strong>是一个工具方法，用于实现对数组元素的映射<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">var Person = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">      <span class="built_in">return</span> (</span><br><span class="line">            &lt;ol&gt;</span><br><span class="line">                &#123;</span><br><span class="line">                    React.Children.map(this.props.children,</span><br><span class="line">                      <span class="keyword">function</span> (child) &#123;</span><br><span class="line">                        <span class="built_in">return</span> &lt;li&gt;&#123;child&#125;&lt;/li&gt;;</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">            &lt;/ol&gt;</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Person&gt;</span><br><span class="line">        &lt;span&gt;大毛&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;二毛&lt;/span&gt;</span><br><span class="line">        &lt;span&gt;三毛&lt;/span&gt;</span><br><span class="line">    &lt;/Person&gt;,</span><br><span class="line">    document.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p>====</p><h2 id="6-4-state状态-点击运行DEMO"><a href="#6-4-state状态-点击运行DEMO" class="headerlink" title="6.4 state状态*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index6.html">6.4 state状态</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h2><ul><li>组件的状态就像人的心情，会经常变化，而且只能由自己来改变</li><li>组件一开始有一个初始状态,然后用户互动,导致状态变化，从而触发界面重新渲染</li><li><strong>getInitialState</strong>用来定义初始状态</li><li>可以给按钮绑定事件，当事件发生的时候调用对应的方法改变组件的状态<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">var Person = React.createClass(&#123;</span><br><span class="line">    getInitialState: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;happy: <span class="literal">true</span>&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    getDefaultProps:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;name:<span class="string">'无名氏'</span>&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick: <span class="keyword">function</span>(event) &#123;</span><br><span class="line">        this.setState(&#123;happy: !this.state.happy&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        var heart = this.state.happy ? <span class="string">'开心'</span> : <span class="string">'不开心'</span>;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;p &gt;</span><br><span class="line">                 &#123;this.props.name&#125; &#123;heart&#125; &lt;br/&gt;</span><br><span class="line">                 &lt;button onClick=&#123;this.handleClick&#125;&gt;变心&lt;/button&gt;</span><br><span class="line">            &lt;/p&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Person name=<span class="string">"张三"</span> /&gt;,</span><br><span class="line">    document.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li></ul><p>====</p><h2 id="6-5-表单元素双向数据绑定-点击运行DEMO"><a href="#6-5-表单元素双向数据绑定-点击运行DEMO" class="headerlink" title="6.5 表单元素双向数据绑定*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index7.html">6.5 表单元素双向数据绑定</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h2><h3 id="注意-如果给表单元素设置了value属性，则必须指定onChange事件处理函数，否则此字段会变成只读状态"><a href="#注意-如果给表单元素设置了value属性，则必须指定onChange事件处理函数，否则此字段会变成只读状态" class="headerlink" title="注意: 如果给表单元素设置了value属性，则必须指定onChange事件处理函数，否则此字段会变成只读状态"></a>注意: 如果给表单元素设置了<strong>value</strong>属性，则必须指定<strong>onChange</strong>事件处理函数，否则此字段会变成只读状态</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var Input = React.createClass(&#123;</span><br><span class="line">    getInitialState: <span class="function"><span class="title">function</span></span>() &#123;//获取初始状态</span><br><span class="line">        <span class="built_in">return</span> &#123;value: <span class="string">'大麦电商'</span>&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange: <span class="keyword">function</span>(event) &#123; //处理改变事件</span><br><span class="line">        this.setState(&#123;value: event.target.value&#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        var value = this.state.value;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input style=&#123;&#123;color:<span class="string">'red'</span>&#125;&#125; <span class="built_in">type</span>=<span class="string">"text"</span></span><br><span class="line">                value=&#123;value&#125; onChange=&#123;this.handleChange&#125; /&gt;</span><br><span class="line">                &lt;p style=&#123;&#123;color:<span class="string">'blue'</span>&#125;&#125;&gt;&#123;value&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(&lt;Input/&gt;, document.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h1 id="7-复合组件-点击运行DEMO"><a href="#7-复合组件-点击运行DEMO" class="headerlink" title="7. 复合组件*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index8.html">7. 复合组件</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h1><p><strong>多个简单的组件嵌套，可构成一个复杂的复合组件，从而完成复杂的交互逻辑</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">var Panel = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"panel panel-default"</span>&gt;</span><br><span class="line">                &lt;PanelHead head=&#123;this.props.head&#125;/&gt;</span><br><span class="line">                &lt;PanelBody body=&#123;this.props.body&#125;/&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var PanelHead = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"panel-heading"</span>&gt;</span><br><span class="line">                &#123;this.props.head&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var PanelBody = React.createClass(&#123;</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"panel-body"</span>&gt;</span><br><span class="line">                &#123;this.props.body&#125;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Panel</span><br><span class="line">        head=<span class="string">"头部"</span></span><br><span class="line">        body=<span class="string">"正文"</span></span><br><span class="line">    /&gt;,</span><br><span class="line">    document.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h1 id="8-组件的生命周期-点击运行DEMO"><a href="#8-组件的生命周期-点击运行DEMO" class="headerlink" title="8. 组件的生命周期*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index9.html">8. 组件的生命周期</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h1><p>React中可以指定在组件的生命周期的不同阶段执行的函数<br><strong>渲染前</strong></p><ul><li><strong>getDefaultProps</strong> 在组件类创建的时候调用一次,则此处返回的对象中的相应属性将会合并到<strong>this.props</strong></li><li><strong>getInitialState</strong> 在组件挂载之前调用一次。返回值将会作为<strong>this.state</strong>的初始值。</li><li><strong>componentWillMount</strong> 在首次渲染之前触发<br>渲染</li><li><strong>render</strong> 当调用的时候，会检测<strong>this.props</strong>和<strong>this.state</strong>，返回一个组件<br>渲染后</li><li><strong>componentDidMount</strong> 在初始化渲染执行之后立刻调用一次</li><li><strong>shouldComponentUpdate</strong> 在接收到新的<strong>props</strong>或者<strong>state</strong>，将要渲染之前调用,返回<strong>false</strong>则不更新组件</li><li><strong>componentWillUpdate</strong> 做一些更新之前的准备工作</li><li><strong>componentDidUpdate</strong> 更新之后触发</li><li><strong>componentWillReceiveProps</strong> 在组件接收到新的<strong>props</strong>的时候调用<br>移除</li><li><strong>componentWillUnmount</strong> 在组件从DOM中移除的时候立刻被调用</li><li><h1 id="componentDidUnmount-组件移除之后调用"><a href="#componentDidUnmount-组件移除之后调用" class="headerlink" title="componentDidUnmount 组件移除之后调用"></a><strong>componentDidUnmount</strong> 组件移除之后调用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">var MessageBox = React.createClass(&#123;</span><br><span class="line">    getInitialState: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'MessageBox.getInitialState'</span>);</span><br><span class="line">        <span class="built_in">return</span> &#123;</span><br><span class="line">            count: 0,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getDefaultProps: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'MessageBox.getDefaultProps'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    componentWillMount: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'MessageBox.componentWillMount'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    componentDidMount: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'MessageBox.componentDidMount'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    componentWillUnmount: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'MessageBox.componentWillUnmount'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    shouldComponentUpdate: <span class="keyword">function</span> (nextProp, nextState) &#123;</span><br><span class="line">        console.log(<span class="string">'MessageBox.shouldComponentUpdate'</span>);</span><br><span class="line">        <span class="keyword">if</span> (nextState.count &gt; 10) <span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    componentWillUpdate: <span class="keyword">function</span> (nextProp, nextState) &#123;</span><br><span class="line">        console.log(<span class="string">'MessageBox.componentWillUpdate'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    componentDidUpdate: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'MessageBox.componentDidUpdate'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    killMySelf: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        ReactDOM.unmountComponentAtNode(document.getElementById(<span class="string">'app'</span>));</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;h1&gt; 计数： &#123;this.state.count&#125;&lt;/h1&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(&lt;MessageBox/&gt;, document.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure></li></ul><h1 id="9-DOM操作-点击运行DEMO"><a href="#9-DOM操作-点击运行DEMO" class="headerlink" title="9. DOM操作*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index10.html">9. DOM操作</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h1><p>给组件加上<strong>ref=”xxx”</strong>后，可在父组件中通过<strong>this.refs.xxx</strong>获取该DOM元素<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">var Focus = React.createClass(&#123;</span><br><span class="line">    handleClick: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        this.refs.msg.focus();</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span>() &#123;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> ref=<span class="string">"msg"</span> /&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"获得焦点"</span></span><br><span class="line">                onClick=&#123;this.handleClick&#125; /&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Focus /&gt;,</span><br><span class="line">    document.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h1 id="10-通过Ajax获取数据-点击运行DEMO"><a href="#10-通过Ajax获取数据-点击运行DEMO" class="headerlink" title="10.通过Ajax获取数据*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index11.html">10.通过Ajax获取数据</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var Suggestion = React.createClass(&#123;</span><br><span class="line">    getInitialState:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">      <span class="built_in">return</span> &#123;&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    handleChange: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        var value = this.refs.input.value;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">            url: <span class="string">'http://www.baidu.com/su'</span>,</span><br><span class="line">            <span class="built_in">type</span>: <span class="string">'get'</span>,</span><br><span class="line">            jsonp: <span class="string">'cb'</span>,</span><br><span class="line">            dataType: <span class="string">'jsonp'</span>,</span><br><span class="line">            data: &#123;wd: value&#125;,</span><br><span class="line">            processData: <span class="literal">true</span>,</span><br><span class="line">            context:this,</span><br><span class="line">            success: <span class="keyword">function</span> (result) &#123;</span><br><span class="line">                var data = result.s;</span><br><span class="line">                data = data.map(<span class="keyword">function</span>(item，index)&#123;</span><br><span class="line">                    <span class="built_in">return</span> &lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">                &#125;);</span><br><span class="line">                this.setState(&#123;content:data&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> ref=<span class="string">"input"</span></span><br><span class="line">                onChange=&#123;this.handleChange&#125;/&gt;</span><br><span class="line">                &lt;ul&gt;</span><br><span class="line">                    &#123;this.state.content&#125;</span><br><span class="line">                &lt;/ul&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Suggestion&gt;&lt;/Suggestion&gt;, document.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h1 id="11-mixin-点击运行DEMO"><a href="#11-mixin-点击运行DEMO" class="headerlink" title="11. mixin*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index12.html">11. mixin</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h1><p>公用抽取出来,让不同的组件共用同一部分逻辑，实现代码重用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">var counterMix = &#123;</span><br><span class="line">    getInitialState:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> &#123;count:0&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    componentWillUpdate:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        console.log(<span class="string">'componentWillUpdate'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        this.setState(&#123;count:this.state.count+1&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">var Counter1 = React.createClass(&#123;</span><br><span class="line">   mixins: [counterMix],</span><br><span class="line">   render:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">       <span class="built_in">return</span> (</span><br><span class="line">           &lt;div&gt;</span><br><span class="line">               &#123;this.state.count&#125;</span><br><span class="line">               &lt;button onClick=&#123;this.handleClick&#125;&gt;增加&lt;/button&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       )</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line">var Counter2 = React.createClass(&#123;</span><br><span class="line">    mixins: [counterMix],</span><br><span class="line">    render:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;this.state.count&#125;</span><br><span class="line">                &lt;button onClick=&#123;this.handleClick&#125;&gt;增加&lt;/button&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(&lt;div&gt;</span><br><span class="line">  &lt;Counter1/&gt;</span><br><span class="line">  &lt;Counter2/&gt;</span><br><span class="line">&lt;/div&gt;,document.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure></p><h1 id="12-插件实现双向数据绑定-点击运行DEMO"><a href="#12-插件实现双向数据绑定-点击运行DEMO" class="headerlink" title="12. 插件实现双向数据绑定*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index13.html">12. 插件实现双向数据绑定</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"lib/react/react-with-addons.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var Input = React.createClass(&#123;</span><br><span class="line">    mixins:[React.addons.LinkedStateMixin],</span><br><span class="line">    getInitialState: <span class="function"><span class="title">function</span></span>() &#123;//获取初始状态</span><br><span class="line">        <span class="built_in">return</span> &#123;msg: <span class="string">'大麦电商!'</span>&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        var msg = this.state.msg;</span><br><span class="line">        <span class="built_in">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> valueLink=&#123;this.linkState(<span class="string">'msg'</span>)&#125; /&gt;</span><br><span class="line">                &lt;p&gt;&#123;msg&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Input/&gt;, document.getElementById(<span class="string">'app'</span>));</span><br></pre></td></tr></table></figure><h1 id="留言板-点击运行DEMO"><a href="#留言板-点击运行DEMO" class="headerlink" title="留言板*点击运行DEMO"></a><a href="http://huwenzhe.com/dmgw/demo/index14.html">留言板</a><span style="color:#b52c26;font-size:15px;">*点击运行DEMO</span></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">var Board = React.createClass(&#123;</span><br><span class="line">getInitialState: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line"><span class="built_in">return</span> &#123;</span><br><span class="line">msg: <span class="string">'请输入'</span>,</span><br><span class="line">messages: this.props.messages</span><br><span class="line">&#125;;</span><br><span class="line">&#125;,</span><br><span class="line">render: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line"><span class="built_in">return</span> (</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;h1&gt;&#123;this.props.title&#125;&lt;/h1&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> defaultValue=&#123;this.state.msg&#125;</span><br><span class="line">   ref=<span class="string">"txtMsg"</span> onClick=&#123;this.clear&#125;/&gt;</span><br><span class="line">&lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">'发言'</span> onClick=&#123;this.leaveMsg&#125;/&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;</span><br><span class="line">this.state.messages.map(<span class="keyword">function</span> (item, index) &#123;</span><br><span class="line"><span class="built_in">return</span> &lt;li key=&#123;index&#125;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line">&#125;,</span><br><span class="line">clear: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">this.refs.txtMsg.value = <span class="string">''</span>;</span><br><span class="line">&#125;,</span><br><span class="line">leaveMsg: <span class="keyword">function</span> (event) &#123;</span><br><span class="line">this.state.messages.push(this.refs.txtMsg.value);</span><br><span class="line">//每次状态都是一个新的state对象</span><br><span class="line">localStorage.setItem(<span class="string">'messages'</span>, JSON.stringify(this.state.messages));</span><br><span class="line">this.setState(&#123;</span><br><span class="line">messages: this.state.messages</span><br><span class="line">&#125;, <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">this.refs.txtMsg.value = <span class="string">''</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">var data = &#123;</span><br><span class="line">title: <span class="string">'大麦留言版'</span>,</span><br><span class="line">messages: JSON.parse(localStorage.getItem(<span class="string">'messages'</span>)) || []</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">&lt;Board &#123;...data&#125;/&gt;,</span><br><span class="line">document.getElementById(<span class="string">'app'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-gold-cdn.xitu.io/2017/6/27/c286966135b9f890967438fe390a8c01&quot; width=&quot;650&quot; height=&quot;370&quot; alt=&quot;react&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-什么是react&quot;&gt;&lt;a href=&quot;#1-什么是react&quot; class=&quot;headerlink&quot; title=&quot;1. 什么是react&quot;&gt;&lt;/a&gt;1. 什么是react&lt;/h1&gt;&lt;h2 id=&quot;React-是一个用于构建用户界面的JavaScript库&quot;&gt;&lt;a href=&quot;#React-是一个用于构建用户界面的JavaScript库&quot; class=&quot;headerlink&quot; title=&quot;React 是一个用于构建用户界面的JavaScript库;&quot;&gt;&lt;/a&gt;React 是一个用于构建用户界面的JavaScript库;&lt;/h2&gt;
    
    </summary>
    
    
      <category term="React" scheme="http://huwenzhe.com/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>npm包管理器发布</title>
    <link href="http://huwenzhe.com/2017/10/11/npm%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/"/>
    <id>http://huwenzhe.com/2017/10/11/npm包管理器/</id>
    <published>2017-10-10T16:00:00.000Z</published>
    <updated>2018-04-13T07:51:24.623Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://docs.npmjs.com/images/npm.svg" width="650" height="370"></p><h3 id="npm包管理器一直是经常用的，上面有各种大神写的工具包然而我们自己却很少发布包；"><a href="#npm包管理器一直是经常用的，上面有各种大神写的工具包然而我们自己却很少发布包；" class="headerlink" title="npm包管理器一直是经常用的，上面有各种大神写的工具包然而我们自己却很少发布包；"></a>npm包管理器一直是经常用的，上面有各种大神写的工具包然而我们自己却很少发布包；</h3><p>以下就整理一下发布包的基本方法;<br><a id="more"></a><br>首先我们的<strong><a href="http://nodejs.cn/" target="_blank" rel="noopener">node</a></strong>安装之后都是都是自带npm的，可以通过<strong><a href="https://baike.baidu.com/item/%E5%91%BD%E4%BB%A4%E6%8F%90%E7%A4%BA%E7%AC%A6?fromtitle=CMD&amp;fromid=1193011" target="_blank" rel="noopener">cmd</a></strong>或者<strong><a href="https://baike.baidu.com/item/Windows%20Power%20Shell/693789?fr=aladdin&amp;fromid=1061700&amp;fromtitle=PowerShell" target="_blank" rel="noopener">PowerShell</a></strong>运行来查看我们的版本;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm --version</span><br></pre></td></tr></table></figure></p><blockquote><p><code>5.3.0</code></p></blockquote><p>或者通过<code>npm config list</code>命令查看一系列详细信息;其中包含node和npm 版本；<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">; cli configs</span><br><span class="line">metrics-registry = &quot;http://registry.npmjs.o</span><br><span class="line">scope = &quot;&quot;</span><br><span class="line">user-agent = &quot;npm/5.3.0 node/v8.4.0 win32 x</span><br><span class="line"></span><br><span class="line">; userconfig C:\Users\Administrator\.npmrc</span><br><span class="line">//registry.npm.taobao.org/:always-auth = fa</span><br><span class="line">//registry.npm.taobao.org/:email = &quot;8258461</span><br><span class="line">//registry.npm.taobao.org/:username = &quot;dear</span><br><span class="line">registry = &quot;http://registry.npmjs.org/&quot;</span><br><span class="line"></span><br><span class="line">; builtin config undefined</span><br><span class="line">prefix = &quot;C:\\Users\\Administrator\\AppData</span><br><span class="line"></span><br><span class="line">; node bin location = C:\Program Files\node</span><br><span class="line">; cwd = C:\</span><br><span class="line">; HOME = C:\Users\Administrator</span><br><span class="line">; &quot;npm config ls -l&quot; to show all defaults.</span><br></pre></td></tr></table></figure></p><p>顺带说个命令：<br><code>npm config get prefix</code>获取当前global位置</p><p>然后安装卸载更新就不说了;</p><p>现在开始正题：<strong>发布</strong><br>首先我们的有一个账号，直接在<a href="https://www.npmjs.com/" target="_blank" rel="noopener">NPM官网</a>注册就好了；<br>这是注册好之后（忽略左上角那个包，是瞎写的）<br><img src="http://huwenzhe.com/blogIndex/images/npm1.png"></p><p>注册之后我们就在本地创建一个文件夹，用来作为发布我们包的仓库，就可以理解为GitHub仓库一样；<br><img src="http://huwenzhe.com/blogIndex/images/npm2.png"></p><p>进入之后我们运行<code>npm init</code>初始化；<br><img src="http://huwenzhe.com/blogIndex/images/npm3.png"></p><p>然后<code>npm login</code>登录，就是我们申请的账号密码；<br><img src="http://huwenzhe.com/blogIndex/images/npm4.png"></p><p><strong>错误处理</strong><br><img src="http://huwenzhe.com/blogIndex/images/npm5.png"><br><img src="http://huwenzhe.com/blogIndex/images/npm7.png"></p><blockquote><p>这个就是因为我在开始命名的时候没有去验证名字，然后名字重复了，在然后在package.json中更改了name，再<code>npm publish</code>就可以了；</p></blockquote><p>v1.0.0版本发布<br><img src="http://huwenzhe.com/blogIndex/images/npm6.png"></p><p>如果我们想要发布版本，就需要更改我们的文件之后在package.json中更改version,要比上个版本号大，以免报错；</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://docs.npmjs.com/images/npm.svg&quot; width=&quot;650&quot; height=&quot;370&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;npm包管理器一直是经常用的，上面有各种大神写的工具包然而我们自己却很少发布包；&quot;&gt;&lt;a href=&quot;#npm包管理器一直是经常用的，上面有各种大神写的工具包然而我们自己却很少发布包；&quot; class=&quot;headerlink&quot; title=&quot;npm包管理器一直是经常用的，上面有各种大神写的工具包然而我们自己却很少发布包；&quot;&gt;&lt;/a&gt;npm包管理器一直是经常用的，上面有各种大神写的工具包然而我们自己却很少发布包；&lt;/h3&gt;&lt;p&gt;以下就整理一下发布包的基本方法;&lt;br&gt;
    
    </summary>
    
    
      <category term="npm" scheme="http://huwenzhe.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>JS爬虫</title>
    <link href="http://huwenzhe.com/2017/10/02/JS%E7%88%AC%E8%99%AB/"/>
    <id>http://huwenzhe.com/2017/10/02/JS爬虫/</id>
    <published>2017-10-01T16:00:00.000Z</published>
    <updated>2018-04-02T07:14:05.010Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-网络爬虫"><a href="#1-网络爬虫" class="headerlink" title="1. 网络爬虫"></a>1. 网络爬虫</h2><p>网络爬虫是一种自动获取网页内容的程序,功能如下</p><ol><li>发出HTTP请求获取指定URL中的内容</li><li>使用jQuery的语法操作网页元素，提取需要的元素</li><li>将数据保存到mysql数据库中</li><li>建立web服务器显示这些数据</li><li>使用计划任务自动执行更新任务</li><li>布署项目到阿里云中并配置反向代理</li></ol><a id="more"></a><h2 id="2-预备知识"><a href="#2-预备知识" class="headerlink" title="2. 预备知识"></a>2. 预备知识</h2><h3 id="2-1-request"><a href="#2-1-request" class="headerlink" title="2.1 request"></a>2.1 request</h3><p>一个简单的HTTP请求工具,用来获取网页内容</p><p><a href="https://www.npmjs.com/package/request" target="_blank" rel="noopener">request</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line">request(&#123;<span class="attr">url</span>: <span class="string">'http://top.baidu.com/category?c=10&amp;fr=topindex'</span></span><br><span class="line">, <span class="attr">encoding</span>: <span class="literal">null</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,response,body</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)</span><br><span class="line">        <span class="built_in">console</span>.error(err);</span><br><span class="line">    body = iconv.decode(body, <span class="string">'gbk'</span>).toString();</span><br><span class="line">    <span class="keyword">var</span> regex = <span class="regexp">/&lt;a href=".\/buzz\?b=\d+&amp;c=\d+"&gt;.+&lt;\/a&gt;/g</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(body.match(regex));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-2-cheerio"><a href="#2-2-cheerio" class="headerlink" title="2.2 cheerio"></a>2.2 cheerio</h3><p>在服务器端实现了jQuery中的DOM操作API</p><p><a href="https://www.npmjs.com/package/cheerio" target="_blank" rel="noopener">cheerio</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="keyword">var</span> $ = cheerio.load(<span class="string">'&lt;ul&gt;</span></span><br><span class="line"><span class="string">&lt;li&gt;&lt;a href="./buzz?b=353&amp;c=10"&gt;玄幻奇幻&lt;/a&gt;&lt;/li&gt;</span></span><br><span class="line"><span class="string">\&lt;li&gt;&lt;a href="./buzz?b=354&amp;c=10"&gt;爱情&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;'</span>);</span><br><span class="line">$(<span class="string">'ul li a'</span>).each(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $me = $(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">var</span> item = &#123;</span><br><span class="line">        name: $me.text().trim(),</span><br><span class="line">        url: $me.attr(<span class="string">'href'</span>).slice(<span class="number">2</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = item.url.match(<span class="regexp">/buzz\?b=(\d+)/</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(result)) &#123;</span><br><span class="line">        item.id = result[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(item);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-3-cron"><a href="#2-3-cron" class="headerlink" title="2.3 cron"></a>2.3 cron</h3><p>用来周期性的执行某种任务或等待处理某些事件的一个守护进程</p><p><a href="https://www.npmjs.com/package/cron" target="_blank" rel="noopener">cron</a></p><p><img src="http://images.cnitblog.com/blog/34483/201301/08090352-4e0aa3fe4f404b3491df384758229be1.png" class="img-responsive"></p><table><thead><tr><th style="text-align:left">符号</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">星号(*)</td><td style="text-align:left">代表所有可能的值</td></tr><tr><td style="text-align:left">逗号(,)</td><td style="text-align:left">可以用逗号隔开的值指定一个列表范围，例如，“1,2,5,7,8,9”</td></tr><tr><td style="text-align:left">中杠(-)</td><td style="text-align:left">可以用整数之间的中杠表示一个整数范围，例如“2-6”表示“2,3,4,5,6”</td></tr><tr><td style="text-align:left">正斜线(/)</td><td style="text-align:left">可以用正斜线指定时间的间隔频率，*/10，如果用在minute字段，表示每十分钟执行一次</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cronJob = <span class="built_in">require</span>(<span class="string">'cron'</span>).CronJob;</span><br><span class="line"><span class="keyword">var</span> job1 = <span class="keyword">new</span> cronJob(<span class="string">"* * * * * *"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'每秒'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">job1.start();</span><br></pre></td></tr></table></figure><h3 id="2-4-debug"><a href="#2-4-debug" class="headerlink" title="2.4 debug"></a>2.4 debug</h3><p>根据环境变量的有选择向控制台输出调试信息</p><p><a href="https://www.npmjs.com/package/debug" target="_blank" rel="noopener">debug</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var debug = require(&apos;debug&apos;)(&apos;crawler:main&apos;);</span><br><span class="line">//windows set DEBUG=crawler:*</span><br><span class="line">//linux export DEBUG=crawler:*</span><br><span class="line">debug(&apos;welcome to zhufengpeixun&apos;);</span><br></pre></td></tr></table></figure><h3 id="2-5-child-process"><a href="#2-5-child-process" class="headerlink" title="2.5 child_process"></a>2.5 child_process</h3><p>child_process即子进程可以创建一个系统子进程并执行shell命令</p><p>spawn语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child_process.spawn(cmd, args=[], [options])</span><br></pre></td></tr></table></figure></p><p>示例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> DOWNLOAD_DIR = <span class="string">'./'</span>;</span><br><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line"><span class="comment">// 使用curl下载文件的函数</span></span><br><span class="line"><span class="keyword">var</span> download_file_curl = <span class="function"><span class="keyword">function</span>(<span class="params">file_url</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 提取文件名</span></span><br><span class="line">    <span class="keyword">var</span> file_name = url.parse(file_url).pathname.split(<span class="string">'/'</span>).pop();</span><br><span class="line">    <span class="comment">// 创建一个可写流的实例</span></span><br><span class="line">    <span class="keyword">var</span> file = fs.createWriteStream(DOWNLOAD_DIR + file_name);</span><br><span class="line">    <span class="comment">// 使用spawn运行curl</span></span><br><span class="line">    <span class="keyword">var</span> curl = spawn(<span class="string">'curl'</span>, [file_url]);</span><br><span class="line">    <span class="comment">// 为spawn实例添加了一个data事件</span></span><br><span class="line">    curl.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; file.write(data); &#125;);</span><br><span class="line">    <span class="comment">// 添加一个end监听器来关闭文件流</span></span><br><span class="line">    curl.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">        file.end();</span><br><span class="line">        <span class="built_in">console</span>.log(file_name + <span class="string">' downloaded to '</span> + DOWNLOAD_DIR);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 当子进程退出时，检查是否有错误，同时关闭文件流</span></span><br><span class="line">    curl.on(<span class="string">'exit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (code != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'Failed: '</span> + code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">download_file_curl(<span class="string">'http://pic.baidu.jpg'</span>);</span><br></pre></td></tr></table></figure></p><p>exec语法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">child_process.exec(cmd, [options], callback)</span><br></pre></td></tr></table></figure></p><p>示例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> DOWNLOAD_DIR = <span class="string">'./'</span>;</span><br><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="keyword">var</span> download_file_curl = <span class="function"><span class="keyword">function</span>(<span class="params">file_url</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 提取文件名</span></span><br><span class="line">    <span class="keyword">var</span> file_name = url.parse(file_url).pathname.split(<span class="string">'/'</span>).pop();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用exec执行curl命令</span></span><br><span class="line">    <span class="keyword">var</span> child = exec(<span class="string">'curl '</span>+file_url+<span class="string">' -o '</span></span><br><span class="line">    +DOWNLOAD_DIR+file_name, <span class="function"><span class="keyword">function</span>(<span class="params">err, stdout, stderr</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">console</span>.log(file_name + <span class="string">' downloaded to '</span> + DOWNLOAD_DIR);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line">download_file_curl(<span class="string">'http://pic.baidu.jpg'</span>);</span><br></pre></td></tr></table></figure><h3 id="2-6-async"><a href="#2-6-async" class="headerlink" title="2.6 async"></a>2.6 async</h3><p>async是一个流程控制库,为我们带来了丰富的嵌套解决方案</p><p><a href="https://www.npmjs.com/package/async" target="_blank" rel="noopener">async</a></p><h4 id="2-6-1-串行执行"><a href="#2-6-1-串行执行" class="headerlink" title="2.6.1 串行执行"></a>2.6.1 串行执行</h4><p>串行执行一个函数数组中的每个函数<br>series(tasks,callback);<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.series([<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, <span class="string">"tv is over"</span>);</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, <span class="string">'homework is down'</span>);</span><br><span class="line">    &#125;],<span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="2-6-2-并行执行"><a href="#2-6-2-并行执行" class="headerlink" title="2.6.2 并行执行"></a>2.6.2 并行执行</h4><p>parallel函数是并行执行多个函数，每个函数都是立即执行，不需要等待其它函数先执行<br>parallel(tasks, [callback])<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.time(<span class="string">'start'</span>);</span><br><span class="line"><span class="keyword">async</span>.parallel([</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                callback(<span class="literal">null</span>, <span class="string">'one'</span>);</span><br><span class="line">            &#125;,<span class="number">2000</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="function"><span class="keyword">function</span> (<span class="params">callback</span>) </span>&#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                callback(<span class="literal">null</span>, <span class="string">'two'</span>);</span><br><span class="line">            &#125;,<span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(results);</span><br><span class="line">        <span class="built_in">console</span>.timeEnd(<span class="string">'start'</span>);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><h4 id="2-6-3-waterfall-瀑布"><a href="#2-6-3-waterfall-瀑布" class="headerlink" title="2.6.3 waterfall(瀑布)"></a>2.6.3 waterfall(瀑布)</h4><p>waterfall和series函数有很多相似之处，都是按顺序依次执行一组函数,不同之处是waterfall每个函数产生的值，都将传给下一个函数<br>waterfall(tasks, [callback])<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.waterfall([<span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, <span class="string">"水"</span>);</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data,callback</span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, data+<span class="string">'+咖啡'</span>);</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">data,callback</span>)</span>&#123;</span><br><span class="line">    callback(<span class="literal">null</span>, data+<span class="string">'+牛奶'</span>);</span><br><span class="line">&#125;],<span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(results);<span class="comment">//水+咖啡+牛奶</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="2-6-4-自动依赖"><a href="#2-6-4-自动依赖" class="headerlink" title="2.6.4 自动依赖"></a>2.6.4 自动依赖</h4><p>用来处理有依赖关系的多个任务的执行<br>auto(tasks, [callback]);<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span>.auto(&#123;</span><br><span class="line">    getWater: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, <span class="string">'Water'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    getFlour: <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, <span class="string">'Flour'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    mixFlour: [<span class="string">'getWater'</span>, <span class="string">'getFlour'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback, results</span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, results[<span class="string">'getWater'</span>]+<span class="string">','</span></span><br><span class="line">        +results[<span class="string">'getFlour'</span>]+<span class="string">','</span>+<span class="string">'mixFlour'</span>);</span><br><span class="line">    &#125;],</span><br><span class="line">    steam: [<span class="string">'mixFlour'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">callback, results</span>)</span>&#123;</span><br><span class="line">        callback(<span class="literal">null</span>, results[<span class="string">'mixFlour'</span>]+<span class="string">',steam'</span>);</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, results</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'err = '</span>, err);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'results = '</span>, results);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>注意callback, results的顺序在不同的<code>async</code>版本中不一样</p></blockquote><h4 id="2-6-5-迭代多个异步任务"><a href="#2-6-5-迭代多个异步任务" class="headerlink" title="2.6.5 迭代多个异步任务"></a>2.6.5 迭代多个异步任务</h4><p>所有的任务都迭代完成后才执行后续任务<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [&#123;<span class="attr">name</span>:<span class="string">'hwz1'</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">'hwz2'</span>&#125;];</span><br><span class="line"><span class="keyword">async</span>.forEach(arr, <span class="function"><span class="keyword">function</span>(<span class="params">item, callback</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1.1 enter: '</span> + item.name);</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'1.1 handle: '</span> + item.name);</span><br><span class="line">        callback(<span class="literal">null</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1.1 err: '</span> + err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="3-实现爬虫"><a href="#3-实现爬虫" class="headerlink" title="3.实现爬虫"></a>3.实现爬虫</h2><h3 id="3-1-抓取内容"><a href="#3-1-抓取内容" class="headerlink" title="3.1 抓取内容"></a>3.1 抓取内容</h3><h4 id="3-1-1-读取内容"><a href="#3-1-1-读取内容" class="headerlink" title="3.1.1 读取内容"></a>3.1.1 读取内容</h4><p>tasks/read.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> request = <span class="built_in">require</span>(<span class="string">'request'</span>);</span><br><span class="line"><span class="keyword">var</span> cheerio = <span class="built_in">require</span>(<span class="string">'cheerio'</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'crawler:read'</span>);</span><br><span class="line"><span class="keyword">var</span> iconv = <span class="built_in">require</span>(<span class="string">'iconv-lite'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports =  <span class="function"><span class="keyword">function</span> (<span class="params">url, callback</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> items = [];</span><br><span class="line">    debug(<span class="string">'读取电影列表'</span>);</span><br><span class="line">    request(&#123;<span class="attr">url</span>:url,<span class="attr">encoding</span>:<span class="literal">null</span>&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err,response,body</span>)</span>&#123;</span><br><span class="line">        body = iconv.decode(body,<span class="string">'gbk'</span>);</span><br><span class="line">        <span class="keyword">var</span> $ = cheerio.load(body);</span><br><span class="line">        $(<span class="string">'.keyword .list-title'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> that = $(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">var</span> item = &#123;</span><br><span class="line">                name:that.text().trim(),</span><br><span class="line">                url:that.attr(<span class="string">'href'</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            items.push(item);</span><br><span class="line">            debug(<span class="string">'读取电影 '</span>,item);</span><br><span class="line">        &#125;);</span><br><span class="line">        callback(<span class="literal">null</span>,items);</span><br><span class="line">        debug(<span class="string">'读取电影列表完毕'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-1-2-数据库操作"><a href="#3-1-2-数据库操作" class="headerlink" title="3.1.2 数据库操作"></a>3.1.2 数据库操作</h4><p>model/index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var mongoose = require(&apos;mongoose&apos;);</span><br><span class="line">mongoose.connect(&apos;mongodb://123.57.143.189/zhufengcrawl&apos;);</span><br><span class="line">exports.Movie =  mongoose.model(&apos;Movie&apos;,new mongoose.Schema(&#123;</span><br><span class="line">    name:String,</span><br><span class="line">    url:String</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure></p><h4 id="3-1-3-保存内容"><a href="#3-1-3-保存内容" class="headerlink" title="3.1.3 保存内容"></a>3.1.3 保存内容</h4><p>tasks/save.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"><span class="keyword">var</span> Movie = <span class="built_in">require</span>(<span class="string">'../model'</span>).Movie;</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'crawler:save'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">items,callback</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">async</span>.series([</span><br><span class="line">       <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">           debug(<span class="string">'清空电影列表'</span>);</span><br><span class="line">           Movie.remove(&#123;&#125;,callback);</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="function"><span class="keyword">function</span>(<span class="params">callback</span>)</span>&#123;</span><br><span class="line">           debug(<span class="string">'保存电影列表'</span>);</span><br><span class="line">           <span class="keyword">async</span>.forEach(items, <span class="function"><span class="keyword">function</span> (<span class="params">item, next</span>) </span>&#123;</span><br><span class="line">               debug(<span class="string">'保存电影 '</span>,item);</span><br><span class="line">               Movie.create(item,next);</span><br><span class="line">           &#125;, callback);</span><br><span class="line">       &#125;</span><br><span class="line">    ],<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">        debug(<span class="string">'保存电影完毕'</span>);</span><br><span class="line">        callback();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="3-1-4-入口文件"><a href="#3-1-4-入口文件" class="headerlink" title="3.1.4 入口文件"></a>3.1.4 入口文件</h4><p>tasks/main.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> read = <span class="built_in">require</span>(<span class="string">'./read'</span>);</span><br><span class="line"><span class="keyword">var</span> save = <span class="built_in">require</span>(<span class="string">'./save'</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="keyword">async</span> = <span class="built_in">require</span>(<span class="string">'async'</span>);</span><br><span class="line"><span class="keyword">var</span> debug = <span class="built_in">require</span>(<span class="string">'debug'</span>)(<span class="string">'crawler:main'</span>);</span><br><span class="line">debug(<span class="string">'开始计划任务'</span>);</span><br><span class="line"><span class="keyword">var</span> movies = [];</span><br><span class="line"><span class="keyword">async</span>.series([</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        read(<span class="string">'http://top.baidu.com/buzz?b=26&amp;c=1&amp;fr=topcategory_c1'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,items</span>)</span>&#123;</span><br><span class="line">            movies = items;</span><br><span class="line">            done();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">done</span>)</span>&#123;</span><br><span class="line">        save(movies,done);</span><br><span class="line">    &#125;</span><br><span class="line">],<span class="function"><span class="keyword">function</span>(<span class="params">err,result</span>)</span>&#123;</span><br><span class="line">    debug(<span class="string">'结束计划任务'</span>);</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h4 id="3-1-5-计划任务"><a href="#3-1-5-计划任务" class="headerlink" title="3.1.5 计划任务"></a>3.1.5 计划任务</h4><p>app.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line"><span class="keyword">var</span> cronJob = <span class="built_in">require</span>(<span class="string">'cron'</span>).CronJob;</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> job = <span class="keyword">new</span> cronJob(<span class="string">'* * * * * '</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> update = spawn(process.execPath,[path.join(__dirname,<span class="string">'tasks/main.js'</span>)]);</span><br><span class="line">    update.stdout.pipe(process.stdout);</span><br><span class="line">    update.stderr.pipe(process.stderr);</span><br><span class="line">    update.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(code);</span><br><span class="line">    &#125;);</span><br><span class="line">    update.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(code);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">job.start();</span><br></pre></td></tr></table></figure></p><h3 id="3-2-页面展示"><a href="#3-2-页面展示" class="headerlink" title="3.2 页面展示"></a>3.2 页面展示</h3><h4 id="3-2-1-启动应用"><a href="#3-2-1-启动应用" class="headerlink" title="3.2.1 启动应用"></a>3.2.1 启动应用</h4><p>app.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.set(<span class="string">'view engine'</span>, <span class="string">'jade'</span>);</span><br><span class="line">app.set(<span class="string">'views'</span>, <span class="string">'views'</span>);</span><br><span class="line"><span class="keyword">var</span> Movie = <span class="built_in">require</span>(<span class="string">'./model'</span>).Movie;</span><br><span class="line">app.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    Movie.find(&#123;&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, movies</span>) </span>&#123;</span><br><span class="line">        res.render(<span class="string">'index'</span>, &#123;</span><br><span class="line">            movies: movies</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">app.listen(<span class="number">9090</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line"><span class="keyword">var</span> cronJob = <span class="built_in">require</span>(<span class="string">'cron'</span>).CronJob;</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">var</span> job = <span class="keyword">new</span> cronJob(<span class="string">'* * * * * '</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> update = spawn(process.execPath,[path.join(__dirname,<span class="string">'tasks/main.js'</span>)]);</span><br><span class="line">    update.stdout.pipe(process.stdout);</span><br><span class="line">    update.stderr.pipe(process.stderr);</span><br><span class="line">    update.on(<span class="string">'close'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(code);</span><br><span class="line">    &#125;);</span><br><span class="line">    update.on(<span class="string">'error'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">code</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(code);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">job.start();</span><br></pre></td></tr></table></figure></p><h4 id="3-2-2-编写模板"><a href="#3-2-2-编写模板" class="headerlink" title="3.2.2 编写模板"></a>3.2.2 编写模板</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">    head</span><br><span class="line">        title 电影风云榜</span><br><span class="line">        link(rel=&quot;stylesheet&quot;,href=&quot;//cdn.bootcss.com/bootstrap/3.3.5/css/bootstrap.min.css&quot;)</span><br><span class="line">    body</span><br><span class="line">        .container</span><br><span class="line">            .panel.panel-primary</span><br><span class="line">                .panel-heading.text-center 电影风云榜</span><br><span class="line">                .panel-body</span><br><span class="line">                    ul.list-group</span><br><span class="line">                        each movie in movies</span><br><span class="line">                            li.list-group-item</span><br><span class="line">                                a(href=&quot;#&#123;movie.url&#125;&quot;)=movie.name</span><br></pre></td></tr></table></figure><h2 id="4-资源"><a href="#4-资源" class="headerlink" title="4. 资源"></a>4. 资源</h2><p><a href="https://github.com/dearzoe/jscrawl" target="_blank" rel="noopener">项目源码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-网络爬虫&quot;&gt;&lt;a href=&quot;#1-网络爬虫&quot; class=&quot;headerlink&quot; title=&quot;1. 网络爬虫&quot;&gt;&lt;/a&gt;1. 网络爬虫&lt;/h2&gt;&lt;p&gt;网络爬虫是一种自动获取网页内容的程序,功能如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;发出HTTP请求获取指定URL中的内容&lt;/li&gt;
&lt;li&gt;使用jQuery的语法操作网页元素，提取需要的元素&lt;/li&gt;
&lt;li&gt;将数据保存到mysql数据库中&lt;/li&gt;
&lt;li&gt;建立web服务器显示这些数据&lt;/li&gt;
&lt;li&gt;使用计划任务自动执行更新任务&lt;/li&gt;
&lt;li&gt;布署项目到阿里云中并配置反向代理&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="js爬虫" scheme="http://huwenzhe.com/tags/js%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>Javascript上传插件</title>
    <link href="http://huwenzhe.com/2017/09/20/javascript%E4%B8%8A%E4%BC%A0%E6%8F%92%E4%BB%B6/"/>
    <id>http://huwenzhe.com/2017/09/20/javascript上传插件/</id>
    <published>2017-09-19T16:00:00.000Z</published>
    <updated>2018-04-13T07:13:11.038Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://dearzoe.coding.me/blogImg/images/apples.png" width="731" height="344" alt="apples" align="center"><br>上周有做过一个上传文件的功能，感觉拼拼凑凑实在是比较坑，用的是百度上传的插件，但是要求标题能改动并且实现一些在API中没有的功能，这周早已经把那件痛苦的事忘记了，但是今天在看网站的时候发现了一些比较好的上传的插件，想分享一下，觉得UI很不错，而且有时间还是想研究一下这些与百度的有哪些不同并且实现的原理；</p><a id="more"></a><p><a href="http://tutorialzine.com/2013/05/mini-ajax-file-upload-form/" target="_blank" rel="noopener">Mini AJAX File Upload Form</a></p><h2 id="这个插件的UI和体验都非常棒，不过它依赖于下面介绍的jQuery-File-Upload-plugin。"><a href="#这个插件的UI和体验都非常棒，不过它依赖于下面介绍的jQuery-File-Upload-plugin。" class="headerlink" title="这个插件的UI和体验都非常棒，不过它依赖于下面介绍的jQuery File Upload plugin。"></a>这个插件的UI和体验都非常棒，不过它依赖于下面介绍的jQuery File Upload plugin。</h2><p>特点</p><ol><li>支持多文件上传</li><li>支持一次选择多个文件上传</li><li>可上传任意文件</li><li>拖拽支持</li><li>无需flash</li><li>小巧的上传表单适合移动设备</li><li>简洁的进度条</li><li>可随时取消</li><li>有文档</li><li>免费</li></ol><p><img src="http://top-css88.b0.upaiyun.com/top-css88/2016/12/1482481048104808.jpg" alt="Mini" align="center"></p><p><a href="http://www.dropzonejs.com/" target="_blank" rel="noopener">Dropzone JS</a></p><h2 id="一个轻量级的文件上传插件，使用起来非常简单，支持jquery，但并不依赖jquery，文档齐全，非常推荐。"><a href="#一个轻量级的文件上传插件，使用起来非常简单，支持jquery，但并不依赖jquery，文档齐全，非常推荐。" class="headerlink" title="一个轻量级的文件上传插件，使用起来非常简单，支持jquery，但并不依赖jquery，文档齐全，非常推荐。"></a>一个轻量级的文件上传插件，使用起来非常简单，支持jquery，但并不依赖jquery，文档齐全，非常推荐。</h2><p>特点</p><ol><li>响应式设计</li><li>支持多文件上传</li><li>支持所有文件格式</li><li>图片上传可预览</li><li>顶级的UI设计</li><li>取消和删除文件的选项</li><li>拖拽支持</li><li>支持一次选择多个文件上传</li><li>免费</li></ol><p><img src="http://top-css88.b0.upaiyun.com/top-css88/2016/12/1482481413689110.jpg" alt="Dropzone" align="center"></p><p><a href="http://blueimp.github.io/jQuery-File-Upload/" target="_blank" rel="noopener">jQuery File Upload Demo</a></p><h2 id="这个插件就不用多说了，可能是最火的文件上传插件。功能齐全，文件上传的后端代码都实现了。不过感觉文档很乱，默认UI也不是很好看，如果让我选择我会选择上面的Dropzone-JS。"><a href="#这个插件就不用多说了，可能是最火的文件上传插件。功能齐全，文件上传的后端代码都实现了。不过感觉文档很乱，默认UI也不是很好看，如果让我选择我会选择上面的Dropzone-JS。" class="headerlink" title="这个插件就不用多说了，可能是最火的文件上传插件。功能齐全，文件上传的后端代码都实现了。不过感觉文档很乱，默认UI也不是很好看，如果让我选择我会选择上面的Dropzone JS。"></a>这个插件就不用多说了，可能是最火的文件上传插件。功能齐全，文件上传的后端代码都实现了。不过感觉文档很乱，默认UI也不是很好看，如果让我选择我会选择上面的Dropzone JS。</h2><p>特点</p><ol><li>拖拽支持</li><li>Html进度条</li><li>支持多文件上传</li><li>可恢复文件上传</li><li>文件验证以及大小信息</li><li>取消上传</li><li>删除上传的文件</li><li>上传失败显示alert提示。</li><li>响应式设计</li><li>支持Ruby</li><li>支持php</li><li>免费</li></ol><p><img src="http://top-css88.b0.upaiyun.com/top-css88/2016/12/1482481700132718.jpg" alt="jQuery" align="center"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://dearzoe.coding.me/blogImg/images/apples.png&quot; width=&quot;731&quot; height=&quot;344&quot; alt=&quot;apples&quot; align=&quot;center&quot;&gt;&lt;br&gt;上周有做过一个上传文件的功能，感觉拼拼凑凑实在是比较坑，用的是百度上传的插件，但是要求标题能改动并且实现一些在API中没有的功能，这周早已经把那件痛苦的事忘记了，但是今天在看网站的时候发现了一些比较好的上传的插件，想分享一下，觉得UI很不错，而且有时间还是想研究一下这些与百度的有哪些不同并且实现的原理；&lt;/p&gt;
    
    </summary>
    
    
      <category term="js" scheme="http://huwenzhe.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Git的操作</title>
    <link href="http://huwenzhe.com/2017/09/05/git%E6%95%99%E7%A8%8B/"/>
    <id>http://huwenzhe.com/2017/09/05/git教程/</id>
    <published>2017-09-04T16:00:00.000Z</published>
    <updated>2018-04-02T07:14:04.841Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下，也可以在项目目录下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">"[name]"</span></span><br><span class="line">$ git config [--global] user.email <span class="string">"[email address]"</span></span><br></pre></td></tr></table></figure><h2 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend &lt;file1&gt; &lt;file2&gt; ...</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --<span class="built_in">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete &lt;branch-name&gt;</span><br><span class="line">$ git branch -dr &lt;remote/branch&gt;</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h2 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [&lt;file&gt;]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h2 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复上一个commit的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成一个可供发布的压缩包</span></span><br><span class="line"><span class="comment"># git archive</span></span><br></pre></td></tr></table></figure><p>（完）</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;新建代码库&quot;&gt;&lt;a href=&quot;#新建代码库&quot; class=&quot;headerlink&quot; title=&quot;新建代码库&quot;&gt;&lt;/a&gt;新建代码库&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 在当前目录新建一个Git代码库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 新建一个目录，将其初始化为Git代码库&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git init [project-name]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 下载一个项目和它的整个代码历史&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; [url]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Git" scheme="http://huwenzhe.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>把node捡起来之buffer</title>
    <link href="http://huwenzhe.com/2017/08/08/buffer/"/>
    <id>http://huwenzhe.com/2017/08/08/buffer/</id>
    <published>2017-08-07T16:00:00.000Z</published>
    <updated>2018-04-02T07:14:04.977Z</updated>
    
    <content type="html"><![CDATA[<hr><p>最近感觉很痛苦，再别人学习新语言新框架的时候，自己却在原地踏步，实在是对自己感到可悲，于是开始着手学习一门后台语言，学习后天语言并不是一时兴起想去学的，而是看现在的趋势，还有是自己的兴趣。<br>js其实我觉得是一门很友好的语言，在踩过基础坑之后，觉得自己应该取扩展一些强数据类型的语言，一是想多了解，二是可以把自己道路拓宽，于是就在想，我应该适合学什么语言，公司现在后台有用java和php，虽然java是使用率最高的语言而php有一句话不是说么”世界上最好的语言是PHP”,但是也许是个人原因，我对php和java都不会感兴趣，java不感兴趣是因为当初找工作的时候总有java打电话，问有没有兴趣培训java的，所以我觉的会不会学java的人太多了？当然都是我自己偏见，而php呢，是因为身边很多用php的码农，我觉的用php好像很”随便”，这在我的理解就是随便的编码格式，随便的…好吧，其实都是我得偏见，最终选择Go语言是因为我在一年前就对它有一些了解，然后机缘巧合，找到了一些学习资料，然后就开始着手学习起来<br>…<br>…跑题了<br>…<br>为啥又捡起来node了呢，node这个作为js写的”后台”首先js的基础学习成本减少了，而且使用各种包又算式比较得心应手，上周看一篇js爬虫抓取数据的例子，然后自己正好有这个需求，于是就想再重开始把node过一遍。<br>–当然还有最主要的是我并不满足只满足现在公司的需求“只对str与DOM做一些操作”</p><h2 id=""><a href="#" class="headerlink" title=""></a><a id="more"></a></h2><h2 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h2><hr><p>像之前说的，js是很友好的，比如字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;123&quot;.length)//3</span><br><span class="line">console.log(&quot;你的名字&quot;.length)//4</span><br></pre></td></tr></table></figure></p><p>在大多数语言中的汉字都是占3个字节的，而js只占1个</p><p>因为在node中，应用需要处理网络协议.操作数据库.处理图片.接收上传文件等.还要处理大量的二进制数据，js中的str不能满足需求，所以就应运而生了Buffer对象；</p><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><p> Buffer是一个像Array结构的对象，它的元素为16进制的两位数（0~255），但是它主要用于操作字节；</p><h5 id="Buffer对象"><a href="#Buffer对象" class="headerlink" title="Buffer对象"></a>Buffer对象</h5><p> 我们可以分配一个Buffer对象，指定它的字节；<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var buf = new Buffer(100)</span><br><span class="line">console.log(buf.length)</span><br></pre></td></tr></table></figure></p><p> 当然我们也可以像“数组”一样继续操作它，如：<br>获取它第10个字节<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(buf[10])</span><br></pre></td></tr></table></figure></p><p> 或者给它第10个字节赋值<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">buf[10] = 100</span><br><span class="line">console.log(buf)</span><br></pre></td></tr></table></figure></p><p> <strong>这里有一个很重要的一点，当赋值范围不在0~255之间的时候，该值就会逐次加256，直到得到0~255之间的整数，当大于的时候逐次减256，如果是小数舍弃小数部分只保留整数部分</strong></p><h5 id="Buffer内存分配机制"><a href="#Buffer内存分配机制" class="headerlink" title="Buffer内存分配机制"></a>Buffer内存分配机制</h5><p>Buffer对象的内存分配不是在V8的<a href="http://www.baidu.com" target="_blank" rel="noopener">堆内存</a>中，而是在Node的C++层面实现内存的申请的，也就是C++先去想系统内存申请一些内存给Node用，每次Node需要用的时候再由C++分配给Node,而不是Node每次需要用内存就去找系统要，这样系统压力很大的。<strong>（这里废话好像多，可以略过）</strong></p><h6 id="总之"><a href="#总之" class="headerlink" title="总之"></a>总之</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var pool</span><br><span class="line">function allocPool()&#123;</span><br><span class="line">  pool = new SlowBuffer(Buffer.poolSize);</span><br><span class="line">  pool.used = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><p><div style="width:400px;height:100px;border:1px solid transparent;border-color:#eee #eee #eee transparent;text-align:center;line-height:100px;font-size:20px;position:relative;"><span style="font-size:14px;position:absolute;left:0;color:orange;height:100%;border-left:2px solid red;">&lt;-used:0</span>8&nbsp;BK的pool</div><br>Node采用的是<a href="http://www.baidu.com" target="_blank" rel="noopener">slab</a>内存分配机制，新建一个局部变量<a href="http://www.baidu.com" target="_blank" rel="noopener">pool</a>，处于分配状态的slab都指向它，slab具有三种状态</p><ul><li>full:完全分配状态</li><li>partial:部分分配状态</li><li>empty:没有分配状态<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var buf = new Buffer(8*1024)</span><br></pre></td></tr></table></figure></li></ul><p><strong>Node以8KB为界限来区分是大对象和小对象(&lt;8KB就按照小对象的方式分配)</strong><br><br></p><ul><li>小对象：会记录起始长度（offset），以及当前pool使用的长度。<strong>(如果第二个Buffer大于剩下的空间，则再新建一个pool)</strong><br><br><br><div style="width:400px;height:100px;border:1px solid transparent;border-color:#eee #eee #eee transparent;text-align:center;line-height:100px;font-size:20px;position:relative;"><span style="font-size:14px;position:absolute;left:0;color:orange;height:100%;border-left:2px solid red;line-height:60px;z-index:10;">&lt;-offset:0</span><span style="font-size:14px;position:absolute;left:30px;color:lightgreen;height:100%;">Buffer1</span><span style="font-size:14px;position:absolute;line-height:60px;left:100px;color:orange;height:100%;border-left:2px solid red;">&lt;-used:2048</span>8&nbsp;BK的pool</div><br><br></li><li>大对象：将会直接分配一个SlowBuffer作为slab单元，这个单元将会被这个大Buffer独占；</li></ul><hr><h2 id="Buffer的转换"><a href="#Buffer的转换" class="headerlink" title="Buffer的转换"></a>Buffer的转换</h2><hr><h5 id="支持转换的类型"><a href="#支持转换的类型" class="headerlink" title="支持转换的类型"></a>支持转换的类型</h5><p><br></p><ul><li>ASCII</li><li>UTF-8</li><li>UTF-16LE/UCS-2</li><li>Base64</li><li>Binary</li><li><p>Hex</p><h5 id="通过new-Buffer-str-encoding-创建buf-write-string-offset-length-encoding-写入（就是修改，不能新增）buf-toString-encoding-start-end-转换"><a href="#通过new-Buffer-str-encoding-创建buf-write-string-offset-length-encoding-写入（就是修改，不能新增）buf-toString-encoding-start-end-转换" class="headerlink" title="通过new Buffer(str, [encoding])创建buf.write(string,[offset],[length],[encoding])写入（就是修改，不能新增）buf.toString([encoding],[start],[end])转换"></a>通过<br><code>new Buffer(str, [encoding])</code>创建<br><code>buf.write(string,[offset],[length],[encoding])</code>写入<strong>（就是修改，不能新增）</strong><br><code>buf.toString([encoding],[start],[end])</code>转换</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var buf = new Buffer(&quot;我是&quot;,&quot;utf-8&quot;);</span><br><span class="line">console.log(buf);</span><br><span class="line">console.log(buf.toString(&quot;utf-8&quot;,0,6));</span><br></pre></td></tr></table></figure><p><strong>比较遗憾的是Node的Buffer对象支持的编码类型有限，于是提供<code>Buffer.isEncoding([encoding])</code>的方法判断是否支持转换</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log(Buffer.isEncoding(&quot;utf-8&quot;));//true</span><br><span class="line">console.log(Buffer.isEncoding(&quot;utf-16&quot;));//false [GBK.GB2312.BIG-5]等都不支持</span><br></pre></td></tr></table></figure><p>当然在Node中不可转换的可以借助其他模块来完成转换。<br><strong><code>iconv</code>（C++调用libiconv库）</strong>和<strong><code>iconv-lite</code>（纯javascript）</strong>两个模块可以支持更多的编码转换</p><h5 id="如-iconv-lite"><a href="#如-iconv-lite" class="headerlink" title="如:iconv-lite"></a>如:iconv-lite</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var iconv = require(&quot;iconv-lite&quot;);</span><br><span class="line">//Buffer 转字符串</span><br><span class="line">var str iconv.decode(buf,&quot;win1251&quot;)</span><br><span class="line">//字符串 转Buffer</span><br><span class="line">var buf = iconv.encode(&quot;im string&quot;,&quot;win1251&quot;)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Buffer的拼接"><a href="#Buffer的拼接" class="headerlink" title="Buffer的拼接"></a>Buffer的拼接</h2><hr><p>先来一段从输入流中读取内容的示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">var rs = fs.createReadStream(&apos;demo.go&apos;);</span><br><span class="line">var data = &apos;&apos;;</span><br><span class="line">rs.on(&quot;data&quot;,function (chunk) &#123;</span><br><span class="line">    console.log(chunk);</span><br><span class="line">    //等价于 data = data.toString() + chunk.toString()</span><br><span class="line">    data+=chunk</span><br><span class="line">&#125;);</span><br><span class="line">rs.on(&quot;end&quot;,function () &#123;</span><br><span class="line">      console.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这样子写没有问题，会输出<code>demo.go</code>中的Go语言的代码，但是如果换成不能解析的就会乱码，像中文，图片，视频等，因为这里的<strong>Buffer</strong>已经当字符串处理了，我们用的<code>+=</code>,等同于<code>data = data.toString() + chunk.toString()</code>,因为在中文场景下Buffer的长度受到了影响，必须还是刚才的代码，我们重现一下报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var rs = fs.createReadStream(&apos;demo.go&apos;,&#123;highWaterMark:11&#125;);</span><br></pre></td></tr></table></figure></p><p>限制了一下每次读取的长度就会产生乱码<br><strong>因为中文在utf-8中显示三个字节，而截断之后只要遇到一个汉字被截断之后每个字节就会以�来显示</strong></p><h5 id="setEncoding-中的string-decoder"><a href="#setEncoding-中的string-decoder" class="headerlink" title="setEncoding()中的string_decoder()"></a><code>setEncoding()</code>中的<code>string_decoder()</code></h5><p>上面的Buffer拼接出现乱码确实令人头痛，当然Buffer长度越大也就越不会出现上面的问题，但是这并不是解决办法，这个问题是不可以忽视的。</p><h6 id="于是想到了setEncoding-方法，"><a href="#于是想到了setEncoding-方法，" class="headerlink" title="于是想到了setEncoding()方法，"></a>于是想到了<code>setEncoding()</code>方法，</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var rs = fs.createReadStream(&apos;main.go&apos;,&#123;highWaterMark:11&#125;);</span><br><span class="line">rs.setEncoding(&quot;utf-8&quot;)</span><br></pre></td></tr></table></figure><p>这下就可以完整输出中文了<br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var StringDecoder = require(&apos;string_decoder&apos;).StringDecoder;</span><br><span class="line">var decoder = new StringDecoder(&apos;utf-8&apos;);</span><br><span class="line"></span><br><span class="line">var buf1 = new Buffer([0xE5, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA])//这个buffer请忽略</span><br><span class="line">console.log(decoder.write(buf1));</span><br><span class="line">var buf2 = new Buffer([0xE5, 0xBA, 0xBA, 0xBA])//这个buffer请忽略</span><br><span class="line">console.log(decoder.write(buf2));</span><br></pre></td></tr></table></figure></p><blockquote><p>原理：在调用<code>setEncoding</code>方法时，可读流内部设置了一个decoder对象，该对象来于<code>string_decoder</code>模块<code>StringDecoder</code>的实例对象，它神奇的地方就在于它知道宽字节字符串在<code>utf-8</code>中是以3个字节的方式储存，所以在第一次<code>write()</code>的时候只把转成的字符，而<strong>“半个”</strong>字符中的字节保存在StringDecoder的实例内部，第二次<code>write()</code>的时候将剩余的字节与第二次开始的字节合并成一个完整的字节在第二次输出。<br><br><br><strong>虽然<code>string_decoder</code>模块很奇妙，但是它并不是万能的，它目前只能处理<code>utf-8</code>.<code>Base64</code>和<code>UCS-2/UTF-16LE</code>这三种编码，虽然他能解决大部分编码问题，但不能从根本上解决该问题</strong></p></blockquote><hr><h2 id="正确的拼接方式"><a href="#正确的拼接方式" class="headerlink" title="正确的拼接方式"></a>正确的拼接方式</h2><hr><p>舍弃了<code>setEncoding</code>之后，解决方法是把Buffer小对象拼接橙一个Buffer大对象。然后用<code>iconv-lite</code>一类的模块进行转换<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var fs = require(&quot;fs&quot;);</span><br><span class="line">var iconv = require(&quot;iconv-lite&quot;);</span><br><span class="line">var rs = fs.createReadStream(&apos;sh.go&apos;,&#123;highWaterMark:11&#125;);</span><br><span class="line">var size = 0;</span><br><span class="line">var chunks = [];</span><br><span class="line">rs.on(&quot;data&quot;,function (chunk) &#123;</span><br><span class="line">    chunks.push(chunk);</span><br><span class="line">    size+=chunk.length</span><br><span class="line">&#125;);</span><br><span class="line">rs.on(&quot;end&quot;,function () &#123;</span><br><span class="line">    var buf = Buffer.concat(chunks,size);</span><br><span class="line">    var str = iconv.decode(buf,&quot;utf-8&quot;);</span><br><span class="line">    console.log(str);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><blockquote><p>Buffer.concat方法和js数组的拼接<code>.concat</code>方法不相同，前者是封装了从小Buffer对象向大Buffer对象复制的过程。源码确实写得很细腻，如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Buffer.concat = function(list,length)&#123;</span><br><span class="line">  if(!Array.isArray(list))&#123;//判断传入list是否是数组</span><br><span class="line">    throw new Error(&quot;Usage: Buffer.concat(list,[length])&quot;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if(list.length == 0)&#123;</span><br><span class="line">    return new Buffer(0);//传入数组为空时创建一个空Buffer</span><br><span class="line">  &#125;else if(list.length === 1)&#123;</span><br><span class="line">      return list[0];//传入数组为1的时直接返回第一个Buffer作为最终Buffer</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if(typeof length !== &apos;number&apos;)&#123;//如果未传入length，或者传入的不是&apos;number&apos;类型，自循环获取</span><br><span class="line">    length = 0;</span><br><span class="line">    for(var i = 0; i &lt;list.length; i++)&#123;</span><br><span class="line">      var buf = list[i];</span><br><span class="line">      length += buf.length;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  var buffer = new Buffer(length);//创建一个所有子Buffer总长的Buffer;</span><br><span class="line">  var pos = 0;</span><br><span class="line">  for(var i = 0; i &lt; list.length; i++)&#123;</span><br><span class="line">    var buf = list[i];</span><br><span class="line">    buf.copy(buffer,pos);//*使用copy方法复制子项插入到总Buffer中，并且制定插入的位置</span><br><span class="line">    pos+=buf.length;//*每次插入之后把刚才copy子项的长度记录，保证下次插入位置正确</span><br><span class="line">  &#125;</span><br><span class="line">  return buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>总结，摆脱string的思维定势，注意Buffer与Sting之间的差异，后续还有Buffer与性能，暂时还没有整理；</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;最近感觉很痛苦，再别人学习新语言新框架的时候，自己却在原地踏步，实在是对自己感到可悲，于是开始着手学习一门后台语言，学习后天语言并不是一时兴起想去学的，而是看现在的趋势，还有是自己的兴趣。&lt;br&gt;js其实我觉得是一门很友好的语言，在踩过基础坑之后，觉得自己应该取扩展一些强数据类型的语言，一是想多了解，二是可以把自己道路拓宽，于是就在想，我应该适合学什么语言，公司现在后台有用java和php，虽然java是使用率最高的语言而php有一句话不是说么”世界上最好的语言是PHP”,但是也许是个人原因，我对php和java都不会感兴趣，java不感兴趣是因为当初找工作的时候总有java打电话，问有没有兴趣培训java的，所以我觉的会不会学java的人太多了？当然都是我自己偏见，而php呢，是因为身边很多用php的码农，我觉的用php好像很”随便”，这在我的理解就是随便的编码格式，随便的…好吧，其实都是我得偏见，最终选择Go语言是因为我在一年前就对它有一些了解，然后机缘巧合，找到了一些学习资料，然后就开始着手学习起来&lt;br&gt;…&lt;br&gt;…跑题了&lt;br&gt;…&lt;br&gt;为啥又捡起来node了呢，node这个作为js写的”后台”首先js的基础学习成本减少了，而且使用各种包又算式比较得心应手，上周看一篇js爬虫抓取数据的例子，然后自己正好有这个需求，于是就想再重开始把node过一遍。&lt;br&gt;–当然还有最主要的是我并不满足只满足现在公司的需求“只对str与DOM做一些操作”&lt;/p&gt;
&lt;h2 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;
    
    </summary>
    
    
      <category term="node" scheme="http://huwenzhe.com/tags/node/"/>
    
      <category term="buffer" scheme="http://huwenzhe.com/tags/buffer/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://huwenzhe.com/2017/06/01/hello-world/"/>
    <id>http://huwenzhe.com/2017/06/01/hello-world/</id>
    <published>2017-05-31T16:00:00.000Z</published>
    <updated>2018-06-28T04:11:55.312Z</updated>
    
    <content type="html"><![CDATA[<p>用于记录学到的点滴  –@huwenzhe</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用于记录学到的点滴  –@huwenzhe&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
